levels(sizeData$physio)
efficients <- subset(sizeData, !is.element(physio, c("NA-NA-NA","water-multi-closed")))#
efficients$physio <- factor(efficients$physio)
nrow(sizeData)
nrow(efficients)
levels(efficients$physio)
n
q()
n <- data.frame(matrix(NA, nrow=nBins, ncol=length(levels(efficients$physio)), dimnames=list(timescale$interval_name, levels(efficients$physio))))#
minSize <- n#
maxSize <- n#
meanSize <- n#
ci <- n
source("https://github.com/naheim/paleosizePaper/raw/master/sharedCode/functions.r")#
sizeData <- read.delim(file='https://raw.githubusercontent.com/naheim/paleosizePaper/master/rawDataFiles/bodySizes.txt') #read in data set#
sizeData$log10_volume<-log10(sizeData$max_vol) #add colummn to data set to take log of max volume of all species#
timescale <- read.delim(file='https://raw.githubusercontent.com/naheim/paleosizePaper/master/rawDataFiles/timescale.txt') #read in data set#
nBins <- nrow(timescale)#
#
# set 0 eco modes to NA#
sizeData$circ[sizeData$circ == ""]  <- NA#
sizeData$circ <- factor(sizeData$circ)#
sizeData$fluid[sizeData$fluid == ""]  <- NA#
sizeData$fluid <- factor(sizeData$fluid)#
sizeData$respOrgan[sizeData$respOrgan == ""]  <- NA#
sizeData$respOrgan <- factor(sizeData$respOrgan)#
sizeData$tiering[sizeData$tiering == 0]  <- NA#
sizeData$motility[sizeData$motility == 0]  <- NA#
sizeData$feeding[sizeData$feeding == 0]  <- NA#
#
sizeData$physio <- paste(sizeData$fluid, sizeData$respOrgan, sizeData$circ, sep="-")#
efficients <- subset(sizeData, !is.element(physio, c("NA-NA-NA","water-multi-closed")))#
efficients$physio <- factor(efficients$physio)#
#
n <- data.frame(matrix(NA, nrow=nBins, ncol=length(levels(efficients$physio)), dimnames=list(timescale$interval_name, levels(efficients$physio))))#
minSize <- n#
maxSize <- n#
meanSize <- n#
ci <- n
head(n)
i <- 1
temp <- subset(efficients, fad_age > timescale$age_top[i] & lad_age < timescale$age_bottom[i])
head(temp)
table(temp$physio)
n <- data.frame(matrix(NA, nrow=nBins, ncol=length(levels(efficients$physio)), dimnames=list(timescale$interval_name, levels(efficients$physio))))#
minSize <- n#
maxSize <- n#
meanSize <- n#
ci <- n#
#
for(i in 1:nBins) {#
	temp <- subset(efficients, fad_age > timescale$age_top[i] & lad_age < timescale$age_bottom[i])#
	## n#
	n[i,] <- as.numeric(table(temp$physio))#
	## min#
	minSize[i,] <- as.numeric(tapply(temp$log10_volume, temp$physio, min, na.rm=TRUE))#
	## max#
	maxSize[i,] <- as.numeric(tapply(temp$log10_volume, temp$physio, max, na.rm=TRUE))#
	## mean#
	meanSize[i,] <- as.numeric(tapply(temp$log10_volume, temp$physio, mean, na.rm=TRUE))#
	## ci#
	ci[i,] <- 1.96 * as.numeric(tapply(temp$log10_volume, temp$physio, sd, na.rm=TRUE))/sqrt(n[i,])#
}
head(n)
head(ci)
head(minSize)
head(meanSize)
head(maxSize)
# plot fluid#
time.plot.mult(nrow=1, plot.height=5, plot.width=9, pdf.name="Dropbox/Abstracts/2018/GSA science/meanSizes.pdf")#
par(pch=16, las=1)#
plot(timescale$age_mid, n$water.multi.open, type="n", xlim=c(541,0), ylim=range(rbind(meanSize+ci, meanSize-ci),na.rm=TRUE), xaxt="n", xlab="", ylab=expression(paste("Biovolume (log"[10]," mm"^3,")", sep="")))#
for(i in 1:ncol(n)) {#
	lines(timescale$age_mid, meanSize[,i], type="o")#
	segments(timescale$age_mid, meanSize[,i]+ci[,i], timescale$age_mid, meanSize[,i]-ci[,i])#
}#
legend("topleft", legend=c('air breathers','water breathers','max','min'), bty="n", fill=c('red','blue',NA,NA), border=c('red','blue',NA,NA), lty=c(NA,NA,1,2), pch=c(NA,NA,16,21))#
dev.off()
physioCols <- RColorBrewer(4, 'RdBu')
?RColorBrewer
physioCols <- brewer.pal(4, 'RdBu')
library(RColorBrewer)
physioCols <- brewer.pal(4, 'RdBu')
physioCols
physioCols <- brewer.pal(ncol(n), 'RdBu')#
#
# plot physio combos -- MEAN#
time.plot.mult(nrow=1, plot.height=5, plot.width=9, pdf.name="Dropbox/Abstracts/2018/GSA science/meanSizes.pdf")#
par(pch=16, las=1)#
plot(timescale$age_mid, n$water.multi.open, type="n", xlim=c(541,0), ylim=range(rbind(meanSize+ci, meanSize-ci),na.rm=TRUE), xaxt="n", xlab="", ylab=expression(paste("Biovolume (log"[10]," mm"^3,")", sep="")))#
for(i in 1:ncol(n)) {#
	lines(timescale$age_mid, meanSize[,i], type="o", cex=0.75, col=physioCols[i])#
	segments(timescale$age_mid, meanSize[,i]+ci[,i], timescale$age_mid, meanSize[,i]-ci[,i], col=physioCols[i])#
}#
legend("topleft", legend=levels(efficients$physio), bty="n", col=physioCols, pch=16)#
dev.off()
# plot physio combos -- MEAN#
time.plot.mult(nrow=1, plot.height=5, plot.width=9, pdf.name="Dropbox/Abstracts/2018/GSA science/meanSizes.pdf")#
par(pch=16, las=1)#
plot(timescale$age_mid, n$water.multi.open, type="n", xlim=c(541,0), ylim=range(rbind(meanSize+ci, meanSize-ci),na.rm=TRUE), xaxt="n", xlab="", ylab=expression(paste("Biovolume (log"[10]," mm"^3,")", sep="")))#
for(i in 1:ncol(n)) {#
	lines(timescale$age_mid, meanSize[,i], type="o", cex=0.75, col=physioCols[i])#
	segments(timescale$age_mid, meanSize[,i]+ci[,i], timescale$age_mid, meanSize[,i]-ci[,i], col=physioCols[i])#
}#
legend("topleft", legend=levels(efficients$physio), bty="n", fill=physioCols, cex=1.25)#
dev.off()
table(efficients$class, efficients$physio)
sizeData$physio <- paste(sizeData$fluid, sizeData$circ, sep="-")
table(sizeData$physio)
table(sizeData$order)
### mode proportions#
feedProp <- table(efficients$physio, efficients$feeding)#
pdf(file="Dropbox/Abstracts/2018/GSA science/feedingProportions.pdf", height=7, width=10)#
layout(matrix(1:2, nrow=2, ncol=1), heights=c(0.15, 0.85))#
par(las=1, cex.axis=1.25, cex.lab=1.25, mar=c(0.25, 4.5, 0.5,0.25)+0.1)#
plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
legend(5,5, legend=c("closed","open"), fill=circCols, horiz=TRUE, cex=2.75, bty="n", xjust=0.5, yjust=0.5)#
barplot(t(apply(feedProp,1, function(x, y){return(x/y)}, y=colSums(feedProp))), names.arg=rep("",6), ylab="Proportion of genera", col=physioCols)#
dev.off()
?legend
### mode proportions#
feedProp <- table(efficients$physio, efficients$feeding)#
pdf(file="Dropbox/Abstracts/2018/GSA science/feedingProportions.pdf", height=7, width=10)#
layout(matrix(1:2, nrow=2, ncol=1), heights=c(0.15, 0.85))#
par(las=1, cex.axis=1.25, cex.lab=1.25, mar=c(0.25, 4.5, 0.5,0.25)+0.1)#
plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
legend(5,5, legend=levels(efficients$physio), fill=physioCols, horiz=TRUE, cex=2.75, bty="n", xjust=0.5, yjust=0.5)#
barplot(t(apply(feedProp,1, function(x, y){return(x/y)}, y=colSums(feedProp))), names.arg=rep("",6), ylab="Proportion of genera", col=physioCols)#
dev.off()
feedProp <- table(efficients$physio, efficients$feeding)#
pdf(file="Dropbox/Abstracts/2018/GSA science/feedingProportions.pdf", height=7, width=10)#
layout(matrix(1:2, nrow=2, ncol=1), heights=c(0.15, 0.85))#
par(las=1, cex.axis=1.25, cex.lab=1.25, mar=c(0.25, 4.5, 0.5,0.25)+0.1)#
plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
legend(5,5, legend=levels(efficients$physio), fill=physioCols, ncol=2, cex=1.75, bty="n", xjust=0.5, yjust=0.5)#
barplot(t(apply(feedProp,1, function(x, y){return(x/y)}, y=colSums(feedProp))), names.arg=rep("",6), ylab="Proportion of genera", col=physioCols)#
dev.off()
tierProp <- table(efficients$physio, efficients$tiering)#
pdf(file="Dropbox/Abstracts/2018/GSA science/tieringProportions.pdf", height=7, width=10)#
layout(matrix(1:2, nrow=2, ncol=1), heights=c(0.15, 0.85))#
par(las=1, cex.axis=1.25, cex.lab=1.25, mar=c(0.25, 4.5, 0.5,0.25)+0.1)#
plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
legend(5,5, legend=levels(efficients$physio), fill=physioCols, ncol=2, cex=1.75, bty="n", xjust=0.5, yjust=0.5)#
barplot(t(apply(tierProp,1, function(x, y){return(x/y)}, y=colSums(tierProp))), names.arg=rep("",6), ylab="Proportion of genera", col=physioCols)#
dev.off()#
#
motileProp <- table(efficients$physio, efficients$motility)#
pdf(file="Dropbox/Abstracts/2018/GSA science/motilityProportions.pdf", height=7, width=10)#
layout(matrix(1:2, nrow=2, ncol=1), heights=c(0.15, 0.85))#
par(las=1, cex.axis=1.25, cex.lab=1.25, mar=c(0.25, 4.5, 0.5,0.25)+0.1)#
plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
legend(5,5, legend=levels(efficients$physio), fill=physioCols, ncol=2, cex=1.75, bty="n", xjust=0.5, yjust=0.5)#
barplot(t(apply(motileProp,1, function(x, y){return(x/y)}, y=colSums(motileProp))), names.arg=rep("",6), ylab="Proportion of genera", col=physioCols)#
dev.off()
head(sizeData)
####### Buffering#
efficients$buff <- NA#
#
efficients$buff[efficients$phylum=="Echinodermata" & efficients$class!="Holothuroidea" & efficients$class!="Echinoidea"] <- "heavy"#
efficients$buff[efficients$phylum=="Bryozoa" & efficients$class!="Ctenostomata"] <- "heavy"#
efficients$buff[efficients$phylum=="Brachiopoda" & efficients$class!="Lingulata"] <- "heavy"#
efficients$buff[efficients$class=="Anthozoa"] <- "heavy"#
efficients$buff[efficients$class=="Hydrozoa" & efficients$order!="Hydroidea"] <- "heavy"#
efficients$buff[efficients$class=="Calcarea"] <- "heavy"#
efficients$buff[efficients$class=="Stromatoporoidea"] <- "heavy"#
efficients$buff[efficients$class=="Irregulares"] <- "heavy"  #
efficients$buff[efficients$class=="Regulares"] <- "heavy"  #
#
efficients$buff[efficients$phylum=="Mollusca"] <- "moderate"#
efficients$buff[efficients$class=="Trilobita"] <- "moderate"#
efficients$buff[efficients$class=="Ostracoda"] <- "moderate"#
efficients$buff[efficients$class=="Malacostraca"] <- "moderate"#
efficients$buff[efficients$class=="Cirripedia"] <- "moderate"#
efficients$buff[efficients$class=="Serpulimorpha"] <- "moderate"#
efficients$buff[efficients$class=="Echinoidea"] <- "moderate"#
efficients$buff[efficients$class=="Cricoconarida"] <- "moderate"#
efficients$buff[efficients$order=="Bradoriida"] <- "moderate"  # I added by analogy with ostracods#
#
efficients$buff[efficients$class=="Holothuroidea"] <- "light"#
efficients$buff[efficients$class=="Ctenostomata"] <- "light"#
efficients$buff[efficients$class=="Lingulata"] <- "light"#
efficients$buff[efficients$phylum=="Chordata"] <- "light"#
efficients$buff[efficients$class=="Graptolithina"] <- "light"#
efficients$buff[efficients$class=="Merostomata"] <- "light"#
efficients$buff[efficients$phylum=="Polychaeta" & efficients$order!="Serpulimorpha"] <- "light"#
efficients$buff[efficients$class=="Scyphozoa"] <- "light"#
efficients$buff[efficients$class=="Hydroidea"] <- "light"#
efficients$buff[efficients$class=="Hexactinellida"] <- "light"#
efficients$buff[efficients$class=="Demospongea"] <- "light"  #
efficients$buff[efficients$class=="Heteractinida"] <- "light" #
#
efficients$buff <- as.factor(efficients$buff)
head(efficientsa)
head(efficients)
table(efficients$buff, efficients$physio)
efficients$buff <- as.factor(efficients$buff, levels=c("light","moderate","heavy")
)
efficients$buff <- as.factor(efficients$buff, levels=c("light","moderate","heavy"))
efficients$buff <- factor(efficients$buff, levels=c("light","moderate","heavy"))
table(efficients$buff, efficients$physio)
library(RColorBrewer)#
#
source("https://github.com/naheim/paleosizePaper/raw/master/sharedCode/functions.r")#
sizeData <- read.delim(file='https://raw.githubusercontent.com/naheim/paleosizePaper/master/rawDataFiles/bodySizes.txt') #read in data set#
sizeData$log10_volume<-log10(sizeData$max_vol) #add colummn to data set to take log of max volume of all species#
timescale <- read.delim(file='https://raw.githubusercontent.com/naheim/paleosizePaper/master/rawDataFiles/timescale.txt') #read in data set#
nBins <- nrow(timescale)#
####### Buffering#
sizeData$buff <- NA#
#
sizeData$buff[sizeData$phylum=="Echinodermata" & sizeData$class!="Holothuroidea" & sizeData$class!="Echinoidea"] <- "heavy"#
sizeData$buff[sizeData$phylum=="Bryozoa" & sizeData$class!="Ctenostomata"] <- "heavy"#
sizeData$buff[sizeData$phylum=="Brachiopoda" & sizeData$class!="Lingulata"] <- "heavy"#
sizeData$buff[sizeData$class=="Anthozoa"] <- "heavy"#
sizeData$buff[sizeData$class=="Hydrozoa" & sizeData$order!="Hydroidea"] <- "heavy"#
sizeData$buff[sizeData$class=="Calcarea"] <- "heavy"#
sizeData$buff[sizeData$class=="Stromatoporoidea"] <- "heavy"#
sizeData$buff[sizeData$class=="Irregulares"] <- "heavy"  #
sizeData$buff[sizeData$class=="Regulares"] <- "heavy"  #
#
sizeData$buff[sizeData$phylum=="Mollusca"] <- "moderate"#
sizeData$buff[sizeData$class=="Trilobita"] <- "moderate"#
sizeData$buff[sizeData$class=="Ostracoda"] <- "moderate"#
sizeData$buff[sizeData$class=="Malacostraca"] <- "moderate"#
sizeData$buff[sizeData$class=="Cirripedia"] <- "moderate"#
sizeData$buff[sizeData$class=="Serpulimorpha"] <- "moderate"#
sizeData$buff[sizeData$class=="Echinoidea"] <- "moderate"#
sizeData$buff[sizeData$class=="Cricoconarida"] <- "moderate"#
sizeData$buff[sizeData$order=="Bradoriida"] <- "moderate"  # I added by analogy with ostracods#
#
sizeData$buff[sizeData$class=="Holothuroidea"] <- "light"#
sizeData$buff[sizeData$class=="Ctenostomata"] <- "light"#
sizeData$buff[sizeData$class=="Lingulata"] <- "light"#
sizeData$buff[sizeData$phylum=="Chordata"] <- "light"#
sizeData$buff[sizeData$class=="Graptolithina"] <- "light"#
sizeData$buff[sizeData$class=="Merostomata"] <- "light"#
sizeData$buff[sizeData$phylum=="Polychaeta" & sizeData$order!="Serpulimorpha"] <- "light"#
sizeData$buff[sizeData$class=="Scyphozoa"] <- "light"#
sizeData$buff[sizeData$class=="Hydroidea"] <- "light"#
sizeData$buff[sizeData$class=="Hexactinellida"] <- "light"#
sizeData$buff[sizeData$class=="Demospongea"] <- "light"  #
sizeData$buff[sizeData$class=="Heteractinida"] <- "light" #
#
sizeData$buff <- factor(sizeData$buff, levels=c("light","moderate","heavy"))#
# set 0 eco modes to NA#
sizeData$circ[sizeData$circ == ""]  <- NA#
sizeData$circ <- factor(sizeData$circ)#
sizeData$fluid[sizeData$fluid == ""]  <- NA#
sizeData$fluid <- factor(sizeData$fluid)#
sizeData$respOrgan[sizeData$respOrgan == ""]  <- NA#
sizeData$respOrgan <- factor(sizeData$respOrgan)#
sizeData$tiering[sizeData$tiering == 0]  <- NA#
sizeData$motility[sizeData$motility == 0]  <- NA#
sizeData$feeding[sizeData$feeding == 0]  <- NA#
#
# Physiological Categories#
sizeData$physio <- paste(sizeData$fluid, sizeData$circ, sep="-")#
#sizeData$physio <- paste(sizeData$fluid, sizeData$respOrgan, sizeData$circ, sep="-")#
efficients <- subset(sizeData, !is.element(physio, c("NA-NA-NA","water-multi-closed")))#
efficients$physio <- factor(efficients$physio)#
n <- data.frame(matrix(NA, nrow=nBins, ncol=length(levels(efficients$physio)), dimnames=list(timescale$interval_name, levels(efficients$physio))))#
minSize <- n#
maxSize <- n#
meanSize <- n#
ci <- n#
#
for(i in 1:nBins) {#
	temp <- subset(efficients, fad_age > timescale$age_top[i] & lad_age < timescale$age_bottom[i])#
	## n#
	n[i,] <- as.numeric(table(temp$physio))#
	## min#
	minSize[i,] <- as.numeric(tapply(temp$log10_volume, temp$physio, min, na.rm=TRUE))#
	## max#
	maxSize[i,] <- as.numeric(tapply(temp$log10_volume, temp$physio, max, na.rm=TRUE))#
	## mean#
	meanSize[i,] <- as.numeric(tapply(temp$log10_volume, temp$physio, mean, na.rm=TRUE))#
	## ci#
	ci[i,] <- 1.96 * as.numeric(tapply(temp$log10_volume, temp$physio, sd, na.rm=TRUE))/sqrt(n[i,])#
}
table(efficients$buff, efficients$physio)
head(sizeData)
# Physiological Categories#
sizeData$physio <- paste(sizeData$fluid, sizeData$circ, sep="-")#
efficients <- subset(sizeData, !is.element(physio, c("NA-NA")))#
#sizeData$physio <- paste(sizeData$fluid, sizeData$respOrgan, sizeData$circ, sep="-")#
#efficients <- subset(sizeData, !is.element(physio, c("NA-NA-NA","water-multi-closed")))#
efficients$physio <- factor(efficients$physio)
table(efficients$buff, efficients$physio)
buffCols <- brewer.pal(length(levels(efficients$buff)), 'YlGnBu')
buffCols
myLabs <- c(levels(efficients$physio), levels(efficients$buff))#
#
n <- data.frame(matrix(NA, nrow=nBins, ncol=length(myLabs), dimnames=list(timescale$interval_name, myLabs)))#
minSize <- n#
maxSize <- n#
meanSize <- n#
ci <- n
head(n)
n <- data.frame(matrix(NA, nrow=nBins, ncol=length(myLabs), dimnames=list(timescale$interval_name, myLabs)))#
minSize <- n#
maxSize <- n#
meanSize <- n#
ci <- n#
#
for(i in 1:nBins) {#
	temp <- subset(efficients, fad_age > timescale$age_top[i] & lad_age < timescale$age_bottom[i])#
	## n#
	tempA <- as.numeric(table(temp$physio))#
	tempB <- as.numeric(table(temp$buff))#
	n[i,] <- c(tempA, tempB)#
	## min#
	tempA <- as.numeric(tapply(temp$log10_volume, temp$physio, min, na.rm=TRUE))#
	tempB <- as.numeric(tapply(temp$log10_volume, temp$buff, min, na.rm=TRUE))#
	minSize[i,] <- c(tempA, tempB)#
	## max#
	tempA <- as.numeric(tapply(temp$log10_volume, temp$physio, max, na.rm=TRUE))#
	tempB <- as.numeric(tapply(temp$log10_volume, temp$buff, max, na.rm=TRUE))#
	maxSize[i,] <- c(tempA, tempB)#
	## mean#
	tempA <- as.numeric(tapply(temp$log10_volume, temp$physio, mean, na.rm=TRUE))#
	tempB <- as.numeric(tapply(temp$log10_volume, temp$buff, mean, na.rm=TRUE))#
	meanSize[i,] <- c(tempA, tempB)#
	## ci#
	tempA <- 1.96 * as.numeric(tapply(temp$log10_volume, temp$physio, sd, na.rm=TRUE))/sqrt(n[i,1:length(levels(efficients$physio))])#
	tempB <- 1.96 * as.numeric(tapply(temp$log10_volume, temp$buff, sd, na.rm=TRUE))/sqrt(n[i,(1+length(levels(efficients$physio))):ncol(n)])#
	ci[i,] <- c(tempA, tempB)#
}
head(n)
head(ci)
myLabs <- c(levels(efficients$physio), levels(efficients$buff))#
physioColNum <- 1:length(levels(efficients$physio))#
buffColNum <- (1+length(levels(efficients$physio))):length(myLabs)
physioColNum
buffColNum
library(RColorBrewer)#
#
source("https://github.com/naheim/paleosizePaper/raw/master/sharedCode/functions.r")#
sizeData <- read.delim(file='https://raw.githubusercontent.com/naheim/paleosizePaper/master/rawDataFiles/bodySizes.txt') #read in data set#
sizeData$log10_volume<-log10(sizeData$max_vol) #add colummn to data set to take log of max volume of all species#
timescale <- read.delim(file='https://raw.githubusercontent.com/naheim/paleosizePaper/master/rawDataFiles/timescale.txt') #read in data set#
nBins <- nrow(timescale)#
####### Buffering#
sizeData$buff <- NA#
#
sizeData$buff[sizeData$phylum=="Echinodermata" & sizeData$class!="Holothuroidea" & sizeData$class!="Echinoidea"] <- "heavy"#
sizeData$buff[sizeData$phylum=="Bryozoa" & sizeData$class!="Ctenostomata"] <- "heavy"#
sizeData$buff[sizeData$phylum=="Brachiopoda" & sizeData$class!="Lingulata"] <- "heavy"#
sizeData$buff[sizeData$class=="Anthozoa"] <- "heavy"#
sizeData$buff[sizeData$class=="Hydrozoa" & sizeData$order!="Hydroidea"] <- "heavy"#
sizeData$buff[sizeData$class=="Calcarea"] <- "heavy"#
sizeData$buff[sizeData$class=="Stromatoporoidea"] <- "heavy"#
sizeData$buff[sizeData$class=="Irregulares"] <- "heavy"  #
sizeData$buff[sizeData$class=="Regulares"] <- "heavy"  #
#
sizeData$buff[sizeData$phylum=="Mollusca"] <- "moderate"#
sizeData$buff[sizeData$class=="Trilobita"] <- "moderate"#
sizeData$buff[sizeData$class=="Ostracoda"] <- "moderate"#
sizeData$buff[sizeData$class=="Malacostraca"] <- "moderate"#
sizeData$buff[sizeData$class=="Cirripedia"] <- "moderate"#
sizeData$buff[sizeData$class=="Serpulimorpha"] <- "moderate"#
sizeData$buff[sizeData$class=="Echinoidea"] <- "moderate"#
sizeData$buff[sizeData$class=="Cricoconarida"] <- "moderate"#
sizeData$buff[sizeData$order=="Bradoriida"] <- "moderate"  # I added by analogy with ostracods#
#
sizeData$buff[sizeData$class=="Holothuroidea"] <- "light"#
sizeData$buff[sizeData$class=="Ctenostomata"] <- "light"#
sizeData$buff[sizeData$class=="Lingulata"] <- "light"#
sizeData$buff[sizeData$phylum=="Chordata"] <- "light"#
sizeData$buff[sizeData$class=="Graptolithina"] <- "light"#
sizeData$buff[sizeData$class=="Merostomata"] <- "light"#
sizeData$buff[sizeData$phylum=="Polychaeta" & sizeData$order!="Serpulimorpha"] <- "light"#
sizeData$buff[sizeData$class=="Scyphozoa"] <- "light"#
sizeData$buff[sizeData$class=="Hydroidea"] <- "light"#
sizeData$buff[sizeData$class=="Hexactinellida"] <- "light"#
sizeData$buff[sizeData$class=="Demospongea"] <- "light"  #
sizeData$buff[sizeData$class=="Heteractinida"] <- "light" #
#
sizeData$buff <- factor(sizeData$buff, levels=c("light","moderate","heavy"))#
# set 0 eco modes to NA#
sizeData$circ[sizeData$circ == ""]  <- NA#
sizeData$circ <- factor(sizeData$circ)#
sizeData$fluid[sizeData$fluid == ""]  <- NA#
sizeData$fluid <- factor(sizeData$fluid)#
sizeData$respOrgan[sizeData$respOrgan == ""]  <- NA#
sizeData$respOrgan <- factor(sizeData$respOrgan)#
sizeData$tiering[sizeData$tiering == 0]  <- NA#
sizeData$motility[sizeData$motility == 0]  <- NA#
sizeData$feeding[sizeData$feeding == 0]  <- NA#
#
# Physiological Categories#
#sizeData$physio <- paste(sizeData$fluid, sizeData$circ, sep="-")#
#efficients <- subset(sizeData, !is.element(physio, c("NA-NA")))#
sizeData$physio <- paste(sizeData$fluid, sizeData$respOrgan, sizeData$circ, sep="-")#
efficients <- subset(sizeData, !is.element(physio, c("NA-NA-NA","water-multi-closed")))#
efficients$physio <- factor(efficients$physio)#
#
myLabs <- c(levels(efficients$physio), levels(efficients$buff))#
physioColNum <- 1:length(levels(efficients$physio))#
buffColNum <- (1+length(levels(efficients$physio))):length(myLabs)#
#
n <- data.frame(matrix(NA, nrow=nBins, ncol=length(myLabs), dimnames=list(timescale$interval_name, myLabs)))#
minSize <- n#
maxSize <- n#
meanSize <- n#
ci <- n#
#
for(i in 1:nBins) {#
	temp <- subset(efficients, fad_age > timescale$age_top[i] & lad_age < timescale$age_bottom[i])#
	## n#
	tempA <- as.numeric(table(temp$physio))#
	tempB <- as.numeric(table(temp$buff))#
	n[i,] <- c(tempA, tempB)#
	## min#
	tempA <- as.numeric(tapply(temp$log10_volume, temp$physio, min, na.rm=TRUE))#
	tempB <- as.numeric(tapply(temp$log10_volume, temp$buff, min, na.rm=TRUE))#
	minSize[i,] <- c(tempA, tempB)#
	## max#
	tempA <- as.numeric(tapply(temp$log10_volume, temp$physio, max, na.rm=TRUE))#
	tempB <- as.numeric(tapply(temp$log10_volume, temp$buff, max, na.rm=TRUE))#
	maxSize[i,] <- c(tempA, tempB)#
	## mean#
	tempA <- as.numeric(tapply(temp$log10_volume, temp$physio, mean, na.rm=TRUE))#
	tempB <- as.numeric(tapply(temp$log10_volume, temp$buff, mean, na.rm=TRUE))#
	meanSize[i,] <- c(tempA, tempB)#
	## ci#
	tempA <- 1.96 * as.numeric(tapply(temp$log10_volume, temp$physio, sd, na.rm=TRUE))/sqrt(n[i,physioColNum])#
	tempB <- 1.96 * as.numeric(tapply(temp$log10_volume, temp$buff, sd, na.rm=TRUE))/sqrt(n[i,buffColNum])#
	ci[i,] <- c(tempA, tempB)#
}#
###### FIGURES#
#
physioCols <- c(brewer.pal(length(levels(efficients$physio)), 'RdBu'), brewer.pal(length(levels(efficients$buff)), 'YlGnBu'))#
#
# plot physio combos -- MEAN#
time.plot.mult(nrow=1, plot.height=5, plot.width=9, pdf.name="Dropbox/Abstracts/2018/GSA science/meanSizes.pdf")#
par(pch=16, las=1)#
plot(timescale$age_mid, n$water.multi.open, type="n", xlim=c(541,0), ylim=range(rbind(meanSize[,physioColNum]+ci[,physioColNum], meanSize[,physioColNum]-ci[,physioColNum]),na.rm=TRUE), xaxt="n", xlab="", ylab=expression(paste("Biovolume (log"[10]," mm"^3,")", sep="")))#
for(i in physioColNum) {#
	lines(timescale$age_mid, meanSize[,i], type="o", cex=0.75, col=physioCols[i])#
	segments(timescale$age_mid, meanSize[,i]+ci[,i], timescale$age_mid, meanSize[,i]-ci[,i], col=physioCols[i])#
}#
legend("topleft", legend=levels(efficients$physio), bty="n", fill=physioCols, cex=1.25)#
dev.off()#
# plot buffering -- MEAN#
time.plot.mult(nrow=1, plot.height=5, plot.width=9, pdf.name="Dropbox/Abstracts/2018/GSA science/meanSizesBuff.pdf")#
par(pch=16, las=1)#
plot(timescale$age_mid, n$water.multi.open, type="n", xlim=c(541,0), ylim=range(rbind(meanSize[,buffColNum]+ci[,buffColNum], meanSize[,buffColNum]-ci[,buffColNum]),na.rm=TRUE), xaxt="n", xlab="", ylab=expression(paste("Biovolume (log"[10]," mm"^3,")", sep="")))#
for(i in buffColNum) {#
	lines(timescale$age_mid, meanSize[,i], type="o", cex=0.75, col=physioCols[i])#
	segments(timescale$age_mid, meanSize[,i]+ci[,i], timescale$age_mid, meanSize[,i]-ci[,i], col=physioCols[i])#
}#
legend("topleft", legend=levels(efficients$physio), bty="n", fill=physioCols, cex=1.25)#
dev.off()#
### mode proportions#
feedProp <- table(efficients$physio, efficients$feeding)#
pdf(file="Dropbox/Abstracts/2018/GSA science/feedingProportions.pdf", height=7, width=10)#
layout(matrix(1:2, nrow=2, ncol=1), heights=c(0.15, 0.85))#
par(las=1, cex.axis=1.25, cex.lab=1.25, mar=c(0.25, 4.5, 0.5,0.25)+0.1)#
plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
legend(5,5, legend=levels(efficients$physio), fill=physioCols, ncol=2, cex=1.75, bty="n", xjust=0.5, yjust=0.5)#
barplot(t(apply(feedProp,1, function(x, y){return(x/y)}, y=colSums(feedProp))), names.arg=rep("",6), ylab="Proportion of genera", col=physioCols[physioColNum])#
dev.off()#
#
tierProp <- table(efficients$physio, efficients$tiering)#
pdf(file="Dropbox/Abstracts/2018/GSA science/tieringProportions.pdf", height=7, width=10)#
layout(matrix(1:2, nrow=2, ncol=1), heights=c(0.15, 0.85))#
par(las=1, cex.axis=1.25, cex.lab=1.25, mar=c(0.25, 4.5, 0.5,0.25)+0.1)#
plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
legend(5,5, legend=levels(efficients$physio), fill=physioCols, ncol=2, cex=1.75, bty="n", xjust=0.5, yjust=0.5)#
barplot(t(apply(tierProp,1, function(x, y){return(x/y)}, y=colSums(tierProp))), names.arg=rep("",6), ylab="Proportion of genera", col=physioCols[physioColNum])#
dev.off()#
#
motileProp <- table(efficients$physio, efficients$motility)#
pdf(file="Dropbox/Abstracts/2018/GSA science/motilityProportions.pdf", height=7, width=10)#
layout(matrix(1:2, nrow=2, ncol=1), heights=c(0.15, 0.85))#
par(las=1, cex.axis=1.25, cex.lab=1.25, mar=c(0.25, 4.5, 0.5,0.25)+0.1)#
plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
legend(5,5, legend=levels(efficients$physio), fill=physioCols, ncol=2, cex=1.75, bty="n", xjust=0.5, yjust=0.5)#
barplot(t(apply(motileProp,1, function(x, y){return(x/y)}, y=colSums(motileProp))), names.arg=rep("",6), ylab="Proportion of genera", col=physioCols[physioColNum])#
dev.off()
###### FIGURES#
#
physioCols <- c(brewer.pal(length(levels(efficients$physio)), 'RdBu'), brewer.pal(length(levels(efficients$buff)), 'YlOrRd'))#
#
# plot physio combos -- MEAN#
time.plot.mult(nrow=1, plot.height=5, plot.width=9, pdf.name="Dropbox/Abstracts/2018/GSA science/meanSizes.pdf")#
par(pch=16, las=1)#
plot(timescale$age_mid, n$water.multi.open, type="n", xlim=c(541,0), ylim=range(rbind(meanSize[,physioColNum]+ci[,physioColNum], meanSize[,physioColNum]-ci[,physioColNum]),na.rm=TRUE), xaxt="n", xlab="", ylab=expression(paste("Biovolume (log"[10]," mm"^3,")", sep="")))#
for(i in physioColNum) {#
	lines(timescale$age_mid, meanSize[,i], type="o", cex=0.75, col=physioCols[i])#
	segments(timescale$age_mid, meanSize[,i]+ci[,i], timescale$age_mid, meanSize[,i]-ci[,i], col=physioCols[i])#
}#
legend("topleft", legend=levels(efficients$physio), bty="n", fill=physioCols, cex=1.25)#
dev.off()#
# plot buffering -- MEAN#
time.plot.mult(nrow=1, plot.height=5, plot.width=9, pdf.name="Dropbox/Abstracts/2018/GSA science/meanSizesBuff.pdf")#
par(pch=16, las=1)#
plot(timescale$age_mid, n$water.multi.open, type="n", xlim=c(541,0), ylim=range(rbind(meanSize[,buffColNum]+ci[,buffColNum], meanSize[,buffColNum]-ci[,buffColNum]),na.rm=TRUE), xaxt="n", xlab="", ylab=expression(paste("Biovolume (log"[10]," mm"^3,")", sep="")))#
for(i in buffColNum) {#
	lines(timescale$age_mid, meanSize[,i], type="o", cex=0.75, col=physioCols[i])#
	segments(timescale$age_mid, meanSize[,i]+ci[,i], timescale$age_mid, meanSize[,i]-ci[,i], col=physioCols[i])#
}#
legend("topleft", legend=levels(efficients$physio), bty="n", fill=physioCols, cex=1.25)#
dev.off()#
### mode proportions#
feedProp <- table(efficients$physio, efficients$feeding)#
pdf(file="Dropbox/Abstracts/2018/GSA science/feedingProportions.pdf", height=7, width=10)#
layout(matrix(1:2, nrow=2, ncol=1), heights=c(0.15, 0.85))#
par(las=1, cex.axis=1.25, cex.lab=1.25, mar=c(0.25, 4.5, 0.5,0.25)+0.1)#
plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
legend(5,5, legend=levels(efficients$physio), fill=physioCols, ncol=2, cex=1.75, bty="n", xjust=0.5, yjust=0.5)#
barplot(t(apply(feedProp,1, function(x, y){return(x/y)}, y=colSums(feedProp))), names.arg=rep("",6), ylab="Proportion of genera", col=physioCols[physioColNum])#
dev.off()#
#
tierProp <- table(efficients$physio, efficients$tiering)#
pdf(file="Dropbox/Abstracts/2018/GSA science/tieringProportions.pdf", height=7, width=10)#
layout(matrix(1:2, nrow=2, ncol=1), heights=c(0.15, 0.85))#
par(las=1, cex.axis=1.25, cex.lab=1.25, mar=c(0.25, 4.5, 0.5,0.25)+0.1)#
plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
legend(5,5, legend=levels(efficients$physio), fill=physioCols, ncol=2, cex=1.75, bty="n", xjust=0.5, yjust=0.5)#
barplot(t(apply(tierProp,1, function(x, y){return(x/y)}, y=colSums(tierProp))), names.arg=rep("",6), ylab="Proportion of genera", col=physioCols[physioColNum])#
dev.off()#
#
motileProp <- table(efficients$physio, efficients$motility)#
pdf(file="Dropbox/Abstracts/2018/GSA science/motilityProportions.pdf", height=7, width=10)#
layout(matrix(1:2, nrow=2, ncol=1), heights=c(0.15, 0.85))#
par(las=1, cex.axis=1.25, cex.lab=1.25, mar=c(0.25, 4.5, 0.5,0.25)+0.1)#
plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
legend(5,5, legend=levels(efficients$physio), fill=physioCols, ncol=2, cex=1.75, bty="n", xjust=0.5, yjust=0.5)#
barplot(t(apply(motileProp,1, function(x, y){return(x/y)}, y=colSums(motileProp))), names.arg=rep("",6), ylab="Proportion of genera", col=physioCols[physioColNum])#
dev.off()
physioCols <- c(brewer.pal(length(levels(efficients$physio)), 'RdBu'), brewer.pal(length(levels(efficients$buff)), 'Dark2'))#
#
# plot physio combos -- MEAN#
time.plot.mult(nrow=1, plot.height=5, plot.width=9, pdf.name="Dropbox/Abstracts/2018/GSA science/meanSizes.pdf")#
par(pch=16, las=1)#
plot(timescale$age_mid, n$water.multi.open, type="n", xlim=c(541,0), ylim=range(rbind(meanSize[,physioColNum]+ci[,physioColNum], meanSize[,physioColNum]-ci[,physioColNum]),na.rm=TRUE), xaxt="n", xlab="", ylab=expression(paste("Biovolume (log"[10]," mm"^3,")", sep="")))#
for(i in physioColNum) {#
	lines(timescale$age_mid, meanSize[,i], type="o", cex=0.75, col=physioCols[i])#
	segments(timescale$age_mid, meanSize[,i]+ci[,i], timescale$age_mid, meanSize[,i]-ci[,i], col=physioCols[i])#
}#
legend("topleft", legend=levels(efficients$physio), bty="n", fill=physioCols, cex=1.25)#
dev.off()#
# plot buffering -- MEAN#
time.plot.mult(nrow=1, plot.height=5, plot.width=9, pdf.name="Dropbox/Abstracts/2018/GSA science/meanSizesBuff.pdf")#
par(pch=16, las=1)#
plot(timescale$age_mid, n$water.multi.open, type="n", xlim=c(541,0), ylim=range(rbind(meanSize[,buffColNum]+ci[,buffColNum], meanSize[,buffColNum]-ci[,buffColNum]),na.rm=TRUE), xaxt="n", xlab="", ylab=expression(paste("Biovolume (log"[10]," mm"^3,")", sep="")))#
for(i in buffColNum) {#
	lines(timescale$age_mid, meanSize[,i], type="o", cex=0.75, col=physioCols[i])#
	segments(timescale$age_mid, meanSize[,i]+ci[,i], timescale$age_mid, meanSize[,i]-ci[,i], col=physioCols[i])#
}#
legend("topleft", legend=levels(efficients$physio), bty="n", fill=physioCols, cex=1.25)#
dev.off()#
### mode proportions#
feedProp <- table(efficients$physio, efficients$feeding)#
pdf(file="Dropbox/Abstracts/2018/GSA science/feedingProportions.pdf", height=7, width=10)#
layout(matrix(1:2, nrow=2, ncol=1), heights=c(0.15, 0.85))#
par(las=1, cex.axis=1.25, cex.lab=1.25, mar=c(0.25, 4.5, 0.5,0.25)+0.1)#
plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
legend(5,5, legend=levels(efficients$physio), fill=physioCols, ncol=2, cex=1.75, bty="n", xjust=0.5, yjust=0.5)#
barplot(t(apply(feedProp,1, function(x, y){return(x/y)}, y=colSums(feedProp))), names.arg=rep("",6), ylab="Proportion of genera", col=physioCols[physioColNum])#
dev.off()#
#
tierProp <- table(efficients$physio, efficients$tiering)#
pdf(file="Dropbox/Abstracts/2018/GSA science/tieringProportions.pdf", height=7, width=10)#
layout(matrix(1:2, nrow=2, ncol=1), heights=c(0.15, 0.85))#
par(las=1, cex.axis=1.25, cex.lab=1.25, mar=c(0.25, 4.5, 0.5,0.25)+0.1)#
plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
legend(5,5, legend=levels(efficients$physio), fill=physioCols, ncol=2, cex=1.75, bty="n", xjust=0.5, yjust=0.5)#
barplot(t(apply(tierProp,1, function(x, y){return(x/y)}, y=colSums(tierProp))), names.arg=rep("",6), ylab="Proportion of genera", col=physioCols[physioColNum])#
dev.off()#
#
motileProp <- table(efficients$physio, efficients$motility)#
pdf(file="Dropbox/Abstracts/2018/GSA science/motilityProportions.pdf", height=7, width=10)#
layout(matrix(1:2, nrow=2, ncol=1), heights=c(0.15, 0.85))#
par(las=1, cex.axis=1.25, cex.lab=1.25, mar=c(0.25, 4.5, 0.5,0.25)+0.1)#
plot(1:10, type="n", axes=FALSE, xlab="", ylab="")#
legend(5,5, legend=levels(efficients$physio), fill=physioCols, ncol=2, cex=1.75, bty="n", xjust=0.5, yjust=0.5)#
barplot(t(apply(motileProp,1, function(x, y){return(x/y)}, y=colSums(motileProp))), names.arg=rep("",6), ylab="Proportion of genera", col=physioCols[physioColNum])#
dev.off()
physioCols <- c(brewer.pal(length(levels(efficients$physio)), 'RdBu'), brewer.pal(length(levels(efficients$buff)), 'Dark2'))#
#
# plot physio combos -- MEAN#
time.plot.mult(nrow=1, plot.height=5, plot.width=9, pdf.name="Dropbox/Abstracts/2018/GSA science/meanSizes.pdf")#
par(pch=16, las=1)#
plot(timescale$age_mid, n$water.multi.open, type="n", xlim=c(541,0), ylim=range(rbind(meanSize[,physioColNum]+ci[,physioColNum], meanSize[,physioColNum]-ci[,physioColNum]),na.rm=TRUE), xaxt="n", xlab="", ylab=expression(paste("Biovolume (log"[10]," mm"^3,")", sep="")))#
for(i in physioColNum) {#
	lines(timescale$age_mid, meanSize[,i], type="o", cex=0.75, col=physioCols[i])#
	segments(timescale$age_mid, meanSize[,i]+ci[,i], timescale$age_mid, meanSize[,i]-ci[,i], col=physioCols[i])#
}#
legend("topleft", legend=levels(efficients$physio), bty="n", fill=physioCols[physioColNum], cex=1.25)#
dev.off()#
# plot buffering -- MEAN#
time.plot.mult(nrow=1, plot.height=5, plot.width=9, pdf.name="Dropbox/Abstracts/2018/GSA science/meanSizesBuff.pdf")#
par(pch=16, las=1)#
plot(timescale$age_mid, n$water.multi.open, type="n", xlim=c(541,0), ylim=range(rbind(meanSize[,buffColNum]+ci[,buffColNum], meanSize[,buffColNum]-ci[,buffColNum]),na.rm=TRUE), xaxt="n", xlab="", ylab=expression(paste("Biovolume (log"[10]," mm"^3,")", sep="")))#
for(i in buffColNum) {#
	lines(timescale$age_mid, meanSize[,i], type="o", cex=0.75, col=physioCols[i])#
	segments(timescale$age_mid, meanSize[,i]+ci[,i], timescale$age_mid, meanSize[,i]-ci[,i], col=physioCols[i])#
}#
legend("topleft", legend=levels(efficients$buff), bty="n", fill=physioCols[buffColNum], cex=1.25)#
dev.off()
range(n)
hist(n)
hist(as.vector(n))
hist(as.matrix(n))
hist(log2(as.matrix(n)))
log2(0)
log2(1)
log2(2)
library(paleoTS)
?paleoTS
q()
8e-9*(100^2)/1000
6000*1000
pi
4*pi*6e6
4*pi*6e6*8e-8
4*pi*((6e6)^2)
4*pi*6e6
4*pi*6e8
4*pi*6e12
(6e6)^2
6^2
8e-8*(4*pi*((6e6)^2))
((8e-8)*(4.523e14))/((5e-7)*0.22)
q()
i <- (8e-9)/1000*(100^2)
i
4*pi*(6000^2)
S <- (4*pi*(6000^2))*(1000^2)
s
S
5.1e8 * (1000^2)
(i*S)/(0.22*5e-7)
rhoa <- 2.2*(100^2)/1000
rhoa
rhoa <- 2.2*(100^2)/1000
rhoa <- 2.2*(100^3)/1000
rhoa
2*((0.75*3.290104e+14)/(pi*2200))^(1/3)
rhob <- 2.5/1000*(100^3)
rhob
(S*.01*2500)/(60*0.22)
2*((0.75*8.56798e+14)/(pi*2200))^(1/3)
(4/3)*pi*5^3
(4/3)*pi*5000^3
523598775598 == 5.23598775598e11
(4/3)*pi*(5000^3)*2200
(4/3)*pi*(5000^3)*2200*0.5*22
20/1000
0.5 * 1.1519e15 * (0.02^2)
0.5 * 1.1519e15 * (20000^2)
2.3e23/4.18e15
2.3e23/5.6e20
6000*1000
(6e6)^2
4*3.14*(6e6)^2
(8e-8*4.522e14)/(5e-7 * 0.22)
2*((0.75*3.289e14)/(3.14*2200))
2*((0.75*3.289e14)/(3.14159*2200))
2*((0.75*3.289e14)/(3.14159*2200))^(1/3)
(4.522e14 * 0.01 * 2500)/(60*0.22)
(4.522e14 * 0.1 * 2500)/(60*0.22)
(4.522e14 * 0.01 * 2500)/(60*0.22)
2*((0.75*8.564e24)/(3.14*2200))^(1/3)
2*((0.75*8.564e14)/(3.14*2200))^(1/3)
10000==1e4
20000==2e4
(4/3)*3.14*(1e4/2)^3
(4/3)*3.14*(1e4/2)^3 == 5.23333333333e11
(4/3)*3.14*(1e4/2)^3 == 5.2333333333e11
(4/3)*3.14*(1e4/2)^3 == 5.23333333333e11
523333333333 == 5.23333333333e11
523333333333*2200
0.5*1.15e15*(2e4)2
0.5*1.15e15*(2e4)^2
q()
23/8
q()
684.93/2
160/60
20/60
160/60
q()
library(jsonlite)
?fromJSON
proj
x <- fromJSON("https://www.inaturalist.org/projects.json?title=snapshot%20cal%20caost")
head(x)
x$project_list.title
x$project_list
x$title
SORT(x$title)
sort(x$title)
x <- fromJSON("https://www.inaturalist.org/projects.json?title=snapshot%20cal%20coast")
sort(x$title)
x <- fromJSON("https://www.inaturalist.org/projects.json?title=snapshot")
nrow(x)
x$title
sort(x$title)
x <- fromJSON("https://www.inaturalist.org/projects.json?title=snapshot%&per_page=200")
nrow(x)
sort(x$title)
x <- fromJSON("https://www.inaturalist.org/projects.json?title=snapshot%&per_page=200&created_at=2018-08-06")
nrow(x)
sort(x$title)
x
head(x)
x <- fromJSON("https://www.inaturalist.org/projects.json?created_at=2018-08-06")
nrow(x)
sort(x$title)
x <- fromJSON("https://www.inaturalist.org/projects.json?created_at=2018-08-06&per_page=200")
nrow(x)
x <- fromJSON("https://www.inaturalist.org/projects.json?per_page=200");nrow(x)
library(rinat)
get_inat_obs_project
get_inat_obs_project("Snapshot Cal Coast","info")
get_inat_obs_project("Snapshot Cal Coast","info", FALSE)
get_inat_obs_project("Snapshot-Cal-Coast","info", FALSE)
get_inat_obs_project("snapshot-cal-coast-6c9b453e-0c33-4d3c-a911-5feb09c8febe","info", FALSE)
library(maps)
map(state(c('California','Oregon','Washington')))
map(state=c('California','Oregon','Washington'))
map(states=c('California','Oregon','Washington'))
map("states", c('California','Oregon','Washington'))
map("state", c('California','Oregon','Washington'))
map("state", c('California','Oregon','Washington,'Alaska'))
q()
install.packages(c('maptools','jsonlite','vegan','openxlsx','rgda','proj4'), dependencies=TRUE)
install.packages(c('maptools','jsonlite','vegan','openxlsx','rgdal','proj4'), dependencies=TRUE)
install.packages(c('rinat'), dependencies=TRUE)
# set root base for proper file direction#
init.dir <- getwd()#
if(is.element(Sys.info()["nodename"], c("es-naheim.local","sr12-cf96e71ca1.stanford.edu"))) {#
	my.root <- "/Volumes/Blastoid/noelheim_data"#
} else {#
	my.root <- "/Users/noelheim"#
}#
Sys.setenv(TZ="America/Los_Angeles")#
#
source(paste(my.root,"/Box Sync/Includes/myFunctions.r", sep=""));#
setwd(paste(my.root,"/Box Sync/git/EasternPacificBiodiversity", sep=""));#
#
library(jsonlite)#
library(rgdal)#
#
## get iNaturalist Token#
iNatToken <- fromJSON(paste(my.root,"/Box Sync/Includes/iNatToken.txt", sep="")) #
#
## get Eastern Pacific KMZ outline#
unzip(zipfile = "data files/EastPacCoast.kmz", exdir = "data files", overwrite = TRUE)#
import <- ogrListLayers("data files/doc.kml")#
eastPac = readOGR("data files/doc.kml","EastPacCoast.kmz")
plot(eastPac)
bbox(eastPac)
rect(bbox(eastPac), col='red')
plot(bbox(eastPac), col='red', add=T)
eastPacBBox <- bbox(eastPac)
eastPacBBox
eastPacBBox$min[2]
eastPacBBox[2,1]
eastPacBBox[1,1]
eastPacBBox[2,2]
eastPacBBox[1,2]
iNatToken
nObs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?access_token=',iNatToken,'&swlat=',eastPacBBox[2,1],'&swlng=',eastPacBBox[1,1],'&nelat=',eastPacBBox[2,2],'&nelng=',eastPacBBox[1,2],'&has[]=geo&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=1&order=desc&order_by=created_at', sep="")))$total_results
nObs
nPages <- nObs/200
nPages
i <- 300
obs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?access_token=',iNatToken,'&swlat=',eastPacBBox[2,1],'&swlng=',eastPacBBox[1,1],'&nelat=',eastPacBBox[2,2],'&nelng=',eastPacBBox[1,2],'&has[]=geo&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=200&order=desc&order_by=created_at', sep="")))
head(obs)
head(obs$results)
obs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?access_token=',iNatToken,'&swlat=',eastPacBBox[2,1],'&swlng=',eastPacBBox[1,1],'&nelat=',eastPacBBox[2,2],'&nelng=',eastPacBBox[1,2],'&has[]=geo&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=200&page='i,'&order=desc&order_by=created_at', sep="")))
i
obs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?access_token=',iNatToken,'&swlat=',eastPacBBox[2,1],'&swlng=',eastPacBBox[1,1],'&nelat=',eastPacBBox[2,2],'&nelng=',eastPacBBox[1,2],'&has[]=geo&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=200&page=',i,'&order=desc&order_by=created_at', sep="")))
obs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?access_token=',iNatToken,'&swlat=',eastPacBBox[2,1],'&swlng=',eastPacBBox[1,1],'&nelat=',eastPacBBox[2,2],'&nelng=',eastPacBBox[1,2],'&has[]=geo&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=200&page=',i,'&order=desc&order_by=created_at', sep="")))
obs <- fromJSON(URLencode(paste('http://www.inaturalist.org/v1/observations?access_token=',iNatToken,'&swlat=',eastPacBBox[2,1],'&swlng=',eastPacBBox[1,1],'&nelat=',eastPacBBox[2,2],'&nelng=',eastPacBBox[1,2],'&has[]=geo&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=200&page=',i,'&order=desc&order_by=created_at', sep="")))
obs <- fromJSON(URLencode(paste('http://www.inaturalist.org/observations?access_token=',iNatToken,'&swlat=',eastPacBBox[2,1],'&swlng=',eastPacBBox[1,1],'&nelat=',eastPacBBox[2,2],'&nelng=',eastPacBBox[1,2],'&has[]=geo&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=200&page=',i,'&order=desc&order_by=created_at', sep="")))
library(rinat)
library(httr)
map('world')
library(maps)
map('world')
getwd()
hall
hall <- read.delim(file='Hall2002Raw.txt')
hall <- read.delim(file='data files/Hall2002Raw.txt')
nrow(hall)
head(hall)
for(i in 1:nrow(hall)){if(!grepl("Ma",hall[i,1]) & !grepl("N.D.",hall[i,1]) & hall[i,1] != ""){print(i)}}
for(i in 1:nrow(hall)){if(!grepl("Ma",hall[i,1]) & !grepl("N.D.",hall[i,1]) & hall[i,1] != ""){print(paste(i, hall[i,1])}}
for(i in 1:nrow(hall)){if(!grepl("Ma",hall[i,1]) & !grepl("N.D.",hall[i,1]) & hall[i,1] != ""){print(paste(i, hall[i,1]))}}
for(i in 1:nrow(hall)){if(!grepl("Ma",hall[i,1]) & !grepl("N.D.",hall[i,1]) & hall[i,1] != ""){print(paste(i, hall[i,1:2]))}}
for(i in 1:nrow(hall)){if(!grepl("Ma",hall[i,1]) & !grepl("N.D.",hall[i,1]) & hall[i,1] != ""){print(paste(i, paste(hall[i,1:2])))}}
i
hall[i,1:2]
paste(hall[i,1:2])
paste(hall[i,1:2], collapse="--")
for(i in 1:nrow(hall)){if(!grepl("Ma",hall[i,1]) & !grepl("N.D.",hall[i,1]) & hall[i,1] != ""){print(hall[i,1:2])}}
hall <- read.delim(file='Hall2002Raw.txt')
hall <- read.delim(file='data file/Hall2002Raw.txt')
hall <- read.delim(file='data files/Hall2002Raw.txt')
for(i in 1:nrow(hall)){if(!grepl("Ma",hall[i,1]) & !grepl("N.D.",hall[i,1]) & hall[i,1] != ""){print(hall[i,1:2])}}
q()
