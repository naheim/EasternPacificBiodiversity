head(noam$success$data)
noam <- read.csv("https://macrostrat.org/api/units?interval_name=Phanerozoic&response=long&format=csv&project_id=1", header=TRUE)
liths <- read.csv("https://macrostrat.org/api/defs/lithologies?all&format=csv", header=TRUE)
head(liths)
liths
table(liths$lith_type)
table(liths$type)
table(liths$class)
nrow(noam)
length(levels(noam$lith))
head(noam$lith)
noam <- read.csv("https://macrostrat.org/api/units?interval_name=Phanerozoic,Pliocene&response=long&format=csv&project_id=1", header=TRUE)
timescale <- read.csv("https://macrostrat.org/api/defs/intervals?timescale=international%20ages", header=TRUE)
timescale <- read.csv("https://macrostrat.org/api/defs/intervals?timescale=international%20ages&format=csv", header=TRUE)
timescale
timescale <- subset(timescale, b_age >= b_age[name == 'Piacenzian'])
timescale
timescale <- read.csv("https://macrostrat.org/api/defs/intervals?timescale=international%20ages&format=csv&?late_age=2.588&early_age=541", header=TRUE)
timescale
timescale <- read.csv("https://macrostrat.org/api/defs/intervals?timescale=international%20ages&format=csv&late_age=2.588&early_age=541", header=TRUE)
timescale
timescale <- read.csv("https://macrostrat.org/api/defs/intervals?timescale=international%20ages&format=csv", header=TRUE)
timescale
timescale <- subset(timescale, b_age >= b_age[name == 'Piacenzian'])
timescale
12.99*36
9.99*36
?predict
10.5/89
?scale
head(noam)
nrow(subset(noam, is.na(strat_name_id)))
nrow(subset(noam, is.na(strat_name_id)))/nrow(noam)
range(subset(noam, is.na(strat_name_id))$b_age)
2.9e-3
2.9e3
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?datainfo&rowcount&base_name=Brachiopoda&taxon_reso=species&interval=Permian", header=T)
nrow(x)
head(x)
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?rowcount&base_name=Brachiopoda&taxon_reso=species&interval=Permian", header=T)
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Permian", header=T)
head(x)
nrow(x)
table(x$measurement)
length(unique(x$specimen_no))
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Permian&show=full", header=T)
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Permian&show=spec,class", header=T)
nrow(x)
head(x)
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Permian&show=spec,class,ref,entname", header=T)
nrow(x)
length(unique(x$accepted_name))
y <- data.frame('maxSize'=tapply(x$average, x$accepted_name, min, na.rm=TRUE), 'maxAge'=tapply(x$max_ma, x$accepted_name, max, na.rm=TRUE),'minAge'=tapply(x$min_ma, x$accepted_name, min, na.rm=TRUE))
head(y)
nrow(y)
range(y$maxSize)
range(x$min, na.rm=T)
range(x$max, na.rm=T)
head(x)
table(x$authorizer)
levels(x$accepted_name)
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Permian,Triassic&show=spec,class,ref,entname", header=TRUE)#
permBrachs <- data.frame('maxSize'=tapply(x$average, x$accepted_name, min, na.rm=TRUE), 'maxAge'=tapply(x$max_ma, x$accepted_name, max, na.rm=TRUE),'minAge'=tapply(x$min_ma, x$accepted_name, min, na.rm=TRUE))
nrow(permBrachs)
table(x$authorizer)
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Carboniferous,Triassic&show=spec,class,ref,entname", header=TRUE)#
permBrachs <- data.frame('maxSize'=tapply(x$average, x$accepted_name, min, na.rm=TRUE), 'maxAge'=tapply(x$max_ma, x$accepted_name, max, na.rm=TRUE),'minAge'=tapply(x$min_ma, x$accepted_name, min, na.rm=TRUE))
nrow(permBrachs)
table(x$authorizer)
4546+116
hist(permBrachs$maxAge)
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Permian&show=spec,class,ref,entname", header=TRUE)#
permBrachs <- data.frame('maxSize'=tapply(x$average, x$accepted_name, min, na.rm=TRUE), 'maxAge'=tapply(x$max_ma, x$accepted_name, max, na.rm=TRUE),'minAge'=tapply(x$min_ma, x$accepted_name, min, na.rm=TRUE))
head(x)
taply(x$average, x$measurement, max)
tapply(x$average, x$measurement, max)
rawData <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Permian&show=spec,class,ref,entname", header=TRUE)#
#
speciesSizes <- data.frame('maxSize'=tapply(rawData$average, rawData$accepted_name, min, na.rm=TRUE), 'maxAge'=tapply(rawData$max_ma, rawData$accepted_name, max, na.rm=TRUE),'minAge'=tapply(rawData$min_ma, rawData$accepted_name, min, na.rm=TRUE))#
#
genusSizes <- data.frame('genus'=levels(rawData$genus), 'nSpecies'=tapply(rawData$accepted_name, rawData$genus, function(x){return(length(unqiue(x)))}), 'maxAge'=tapply(rawData$max_ma, rawData$genus, max, na.rm=TRUE),'minAge'=tapply(rawData$min_ma, rawData$genus, min, na.rm=TRUE))
genusSizes <- data.frame('genus'=levels(rawData$genus), 'nSpecies'=tapply(rawData$accepted_name, rawData$genus, function(x){return(length(unique(x)))}), 'maxAge'=tapply(rawData$max_ma, rawData$genus, max, na.rm=TRUE),'minAge'=tapply(rawData$min_ma, rawData$genus, min, na.rm=TRUE))
head(genusSizes)
nrow(genusSizes)
tapply(rawData$average, list(rawData$accepted_name, rawData$measurement), max, na.rm=TRUE)
head(tapply(rawData$average, list(rawData$accepted_name, rawData$measurement), max, na.rm=TRUE))
head(genusSizes)
speciesSizes <- data.frame('maxAge'=tapply(rawData$max_ma, rawData$accepted_name, max, na.rm=TRUE),'minAge'=tapply(rawData$min_ma, rawData$accepted_name, min, na.rm=TRUE), tapply(rawData$average, list(rawData$accepted_name, rawData$measurement), max, na.rm=TRUE))
head(speciesSizes)
speciesSizes <- data.frame('maxAge'=tapply(rawData$max_ma, rawData$accepted_name, max, na.rm=TRUE),'minAge'=tapply(rawData$min_ma, rawData$accepted_name, min, na.rm=TRUE), tapply(rawData$average, list(rawData$accepted_name, rawData$measurement), max, na.rm=TRUE), 'maxDim' = tapply(rawData$average, rawData$accepted_name, max, na.rm=TRUE))
head(speciesSizes)
plot(speciesSizes$length, speciesSizes$width, pch=16); abline(a=0,b=1,lty=2, col='red')
plot(speciesSizes$maxDim, speciesSizes$width, pch=16); abline(a=0,b=1,lty=2, col='red')
nrow(speciesSizes)
nrow(subset(speciesSizes, width==maxDim))
nrow(subset(speciesSizes, width==maxDim))/nrow(speciesSizes)
tapply(rawData$genus, rawData$accepted_name, max)
tapply(rawData$genus, rawData$accepted_name, function(x){return(x[1])})
tapply(rawData$genus, rawData$accepted_name, function(x){return(as.character(x[1]))})
head(tapply(rawData$genus, rawData$accepted_name, function(x){return(as.character(x[1]))}))
speciesSizes <- data.frame('genus'=factor(tapply(rawData$genus, rawData$accepted_name, function(x){return(as.character(x[1]))})), 'maxAge'=tapply(rawData$max_ma, rawData$accepted_name, max, na.rm=TRUE),'minAge'=tapply(rawData$min_ma, rawData$accepted_name, min, na.rm=TRUE), tapply(rawData$average, list(rawData$accepted_name, rawData$measurement), max, na.rm=TRUE), 'maxDim' = tapply(rawData$average, rawData$accepted_name, max, na.rm=TRUE))
head(speciesSizes)
range(speciesSizes$maxDim)
genusSizes <- data.frame('nSpecies'=table(speciesSizes$genus), 'maxAge'=tapply(speciesSizes$max_ma, speciesSizes$genus, max, na.rm=TRUE),'minAge'=tapply(speciesSizes$min_ma, speciesSizes$genus, min, na.rm=TRUE), 'meanSize'=tapply(speciesSizes$maxDim, speciesSizes$genus, mean))
genusSizes <- data.frame('nSpecies'=table(speciesSizes$genus), 'maxAge'=tapply(speciesSizes$maxAge, speciesSizes$genus, max, na.rm=TRUE),'minAge'=tapply(speciesSizes$minAge, speciesSizes$genus, min, na.rm=TRUE), 'meanSize'=tapply(speciesSizes$maxDim, speciesSizes$genus, mean))
head(genusSizes)
q()
4*5
67000/60/50
58/40/50
58000/40/50
67000/56/50
58000/41/50
1334/270
1334/263
(1334-26)/263
(1334-263)/263
(1334-263)/
(1334-263)
240-145
(240-145)/12
169-146
(240-121)/12
205/8
244/8
q()
?png
q()
69.5-58
(69.5-58)/69.5
(69.4-58)/69.4
q()
# set root base for proper file direction#
init.dir <- getwd()#
if(is.element(Sys.info()["nodename"], c("es-naheim.local","sr12-cf96e71ca1.stanford.edu"))) {#
	my.root <- "/Volumes/Blastoid/noelheim_data"#
} else {#
	my.root <- "/Users/noelheim"#
}#
Sys.setenv(TZ="America/Los_Angeles")#
#
source(paste(my.root,"/Box Sync/Includes/myFunctions.r", sep=""));#
setwd(paste(my.root,"/Box Sync/git/snapshotcalcoast", sep=""));#
#
load("data files/calCoastObs.RData")#
#
dropColumns <- c('$time_observed_at','annotations','photos','created_at_details','tags','created_time_zone','quality_metrics','flags','description','time_zone_offset','project_ids_with_curator_id','observed_o','observed_on_string','outlinks','sounds','ofvs','preferences','faves','non_owner_ids','project_ids_without_curator_id','votes','observation_photos','project_observations','identifications','geojson')#
#
temp <- lapply(calCoast, function(x, drops){return(x[,!is.element(names(x), drops)])}, drops=dropColumns)
temp2 <- rbindlist(temp)
temp2 <- do.call(rbind, temp)
# set root base for proper file direction#
init.dir <- getwd()#
if(is.element(Sys.info()["nodename"], c("es-naheim.local","sr12-cf96e71ca1.stanford.edu"))) {#
	my.root <- "/Volumes/Blastoid/noelheim_data"#
} else {#
	my.root <- "/Users/noelheim"#
}#
Sys.setenv(TZ="America/Los_Angeles")#
#
source(paste(my.root,"/Box Sync/Includes/myFunctions.r", sep=""));#
setwd(paste(my.root,"/Box Sync/git/snapshotcalcoast", sep=""));#
#
library(jsonlite)#
## get list of snapshot cal coast projects#
projNames <- c("Snapshot Cal Coast 2016","Snapshot Cal Coast 2017","Snapshot Cal Coast 2018")#
projects <- fromJSON(URLencode('http://api.inaturalist.org/v1/projects?q=snapshot cal coast&per_page=200'))$results#
#
# columns I don't want to keep#
dropColumns <- c('$time_observed_at','annotations','photos','created_at_details','tags','created_time_zone','quality_metrics','flags','description','time_zone_offset','project_ids_with_curator_id','observed_o','observed_on_string','outlinks','sounds','ofvs','preferences','faves','non_owner_ids','project_ids_without_curator_id','votes','observation_photos','project_observations','identifications','geojson')#
#
# loop through projects
i <- 1
projId <- subset(projects, title==projNames[j])$id#
#
	## get number of observations and pages#
	nObs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?project_id=',projId,'&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=1&order=desc&order_by=created_at&quality_grade=research', sep="")))$total_results#
	if(nObs %% 200 == 0) {#
		nPages <- nObs/200#
	} else {#
		nPages <- trunc(nObs/200)+1#
	}#
	print(paste(projNames[j],": There are ",nObs," observations on ",nPages," pages.", sep=""))#
#
	## download data#
	for(i in 1:nPages) {#
		obs <- fromJSON(URLencode(paste("http://api.inaturalist.org/v1/observations?project_id=",projId,"&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&page=",i,"&per_page=200&order=desc&order_by=created_at&quality_grade=research", sep="")))#
		calCoast <- rbind(calCoast, obs$results[,!is.element(names(obs$results), dropColumns)])#
		#calCoast[[i]] <- obs$results#
		if(i %% 2 == 0) print(i)#
	}
calCoast <- data.frame()
j <- 1
projId <- subset(projects, title==projNames[j])$id#
#
	## get number of observations and pages#
	nObs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?project_id=',projId,'&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=1&order=desc&order_by=created_at&quality_grade=research', sep="")))$total_results#
	if(nObs %% 200 == 0) {#
		nPages <- nObs/200#
	} else {#
		nPages <- trunc(nObs/200)+1#
	}#
	print(paste(projNames[j],": There are ",nObs," observations on ",nPages," pages.", sep=""))#
#
	## download data#
	for(i in 1:nPages) {#
		obs <- fromJSON(URLencode(paste("http://api.inaturalist.org/v1/observations?project_id=",projId,"&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&page=",i,"&per_page=200&order=desc&order_by=created_at&quality_grade=research", sep="")))#
		calCoast <- rbind(calCoast, obs$results[,!is.element(names(obs$results), dropColumns)])#
		#calCoast[[i]] <- obs$results#
		if(i %% 2 == 0) print(i)#
	}
class(obs$results)
?merge
calCoast <- merge(calCoast, obs$results[,!is.element(names(obs$results), dropColumns)])
nrow(calCoast)
row.names(obs$results) <- (nrow(calCoast)+1):(2*nrow(calCoast)+1)
nrow(calCoast)+1
2*nrow(calCoast)+1
2*nrow(calCoast)
row.names(obs$results) <- (nrow(calCoast)+1):(2*nrow(calCoast))
calCoast <- rbind(calCoast, obs$results[,!is.element(names(obs$results), dropColumns)])
j
calCoast <- data.frame()
projId <- subset(projects, title==projNames[j])$id#
#
	## get number of observations and pages#
	nObs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?project_id=',projId,'&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=1&order=desc&order_by=created_at&quality_grade=research', sep="")))$total_results#
	if(nObs %% 200 == 0) {#
		nPages <- nObs/200#
	} else {#
		nPages <- trunc(nObs/200)+1#
	}#
	print(paste(projNames[j],": There are ",nObs," observations on ",nPages," pages.", sep=""))#
#
	## download data#
	for(i in 1:nPages) {#
		obs <- fromJSON(URLencode(paste("http://api.inaturalist.org/v1/observations?project_id=",projId,"&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&page=",i,"&per_page=200&order=desc&order_by=created_at&quality_grade=research", sep="")))#
		row.names(obs$results) <- (nrow(calCoast)+1):(2*nrow(calCoast))#
		calCoast <- rbind(calCoast, obs$results[,!is.element(names(obs$results), dropColumns)])#
		#calCoast[[i]] <- obs$results#
		if(i %% 2 == 0) print(i)#
	}
i
nrow(calCoast)
nrow(calCoast)+1
nrow(calCoast)+1+nrow(obs$results)
row.names(obs$results) <- (nrow(calCoast)+1):(nrow(calCoast)+nrow(obs$results))
calCoast <- data.frame()
projId <- subset(projects, title==projNames[j])$id#
#
	## get number of observations and pages#
	nObs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?project_id=',projId,'&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=1&order=desc&order_by=created_at&quality_grade=research', sep="")))$total_results#
	if(nObs %% 200 == 0) {#
		nPages <- nObs/200#
	} else {#
		nPages <- trunc(nObs/200)+1#
	}#
	print(paste(projNames[j],": There are ",nObs," observations on ",nPages," pages.", sep=""))#
#
	## download data#
	for(i in 1:nPages) {#
		obs <- fromJSON(URLencode(paste("http://api.inaturalist.org/v1/observations?project_id=",projId,"&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&page=",i,"&per_page=200&order=desc&order_by=created_at&quality_grade=research", sep="")))#
		if(i > 1) {#
			row.names(obs$results) <- (nrow(calCoast)+1):(nrow(calCoast)+nrow(obs$results))#
		}#
		calCoast <- rbind(calCoast, obs$results[,!is.element(names(obs$results), dropColumns)])#
		#calCoast[[i]] <- obs$results#
		if(i %% 2 == 0) print(i)#
	}
row.names(obs$results)
row.names(calCoast)
head(row.names(obs$results))
head((obs$results))
i
j
calCoast <- data.frame()
projId <- subset(projects, title==projNames[j])$id#
#
	## get number of observations and pages#
	nObs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?project_id=',projId,'&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=1&order=desc&order_by=created_at&quality_grade=research', sep="")))$total_results#
	if(nObs %% 200 == 0) {#
		nPages <- nObs/200#
	} else {#
		nPages <- trunc(nObs/200)+1#
	}#
	print(paste(projNames[j],": There are ",nObs," observations on ",nPages," pages.", sep=""))#
#
	## download data#
	for(i in 1:nPages) {#
		obs <- fromJSON(URLencode(paste("http://api.inaturalist.org/v1/observations?project_id=",projId,"&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&page=",i,"&per_page=200&order=desc&order_by=created_at&quality_grade=research", sep="")))#
		obs$results <- obs$results[,!is.element(names(obs$results), dropColumns)]#
		if(i > 1) {#
			row.names(obs$results) <- (nrow(calCoast)+1):(nrow(calCoast)+nrow(obs$results))#
		}#
		calCoast <- rbind(calCoast, obs$results)#
		#calCoast[[i]] <- obs$results#
		if(i %% 2 == 0) print(i)#
	}
head((obs$results))
calCoast <- data.frame()
projId <- subset(projects, title==projNames[j])$id#
#
	## get number of observations and pages#
	nObs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?project_id=',projId,'&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=1&order=desc&order_by=created_at&quality_grade=research', sep="")))$total_results#
	if(nObs %% 200 == 0) {#
		nPages <- nObs/200#
	} else {#
		nPages <- trunc(nObs/200)+1#
	}#
	print(paste(projNames[j],": There are ",nObs," observations on ",nPages," pages.", sep=""))#
#
	## download data#
	for(i in 1:nPages) {#
		obs <- fromJSON(URLencode(paste("http://api.inaturalist.org/v1/observations?project_id=",projId,"&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&page=",i,"&per_page=200&order=desc&order_by=created_at&quality_grade=research", sep="")))#
		obs$results <- obs$results[,!is.element(names(obs$results), dropColumns)]#
		if(i > 1) {#
			row.names(obs$results) <- (nrow(calCoast)+1):(nrow(calCoast)+nrow(obs$results))#
		}#
		calCoast <- merge(calCoast, obs$results)#
		#calCoast[[i]] <- obs$results#
		if(i %% 2 == 0) print(i)#
	}
# set root base for proper file direction#
init.dir <- getwd()#
if(is.element(Sys.info()["nodename"], c("es-naheim.local","sr12-cf96e71ca1.stanford.edu"))) {#
	my.root <- "/Volumes/Blastoid/noelheim_data"#
} else {#
	my.root <- "/Users/noelheim"#
}#
Sys.setenv(TZ="America/Los_Angeles")#
#
source(paste(my.root,"/Box Sync/Includes/myFunctions.r", sep=""));#
setwd(paste(my.root,"/Box Sync/git/snapshotcalcoast", sep=""));#
#
library(jsonlite)#
## get list of snapshot cal coast projects#
projNames <- c("Snapshot Cal Coast 2016","Snapshot Cal Coast 2017","Snapshot Cal Coast 2018")#
projects <- fromJSON(URLencode('http://api.inaturalist.org/v1/projects?q=snapshot cal coast&per_page=200'))$results#
#
# columns I don't want to keep#
dropColumns <- c('$time_observed_at','annotations','photos','created_at_details','tags','created_time_zone','quality_metrics','flags','description','time_zone_offset','project_ids_with_curator_id','observed_o','observed_on_string','outlinks','sounds','ofvs','preferences','faves','non_owner_ids','project_ids_without_curator_id','votes','observation_photos','project_observations','identifications','geojson')#
#
# loop through projects#
calCoast <- data.frame()#
for(j in 1:3) {#
	projId <- subset(projects, title==projNames[j])$id#
#
	## get number of observations and pages#
	nObs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?project_id=',projId,'&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=1&order=desc&order_by=created_at&quality_grade=research', sep="")))$total_results#
	if(nObs %% 200 == 0) {#
		nPages <- nObs/200#
	} else {#
		nPages <- trunc(nObs/200)+1#
	}#
	print(paste(projNames[j],": There are ",nObs," observations on ",nPages," pages.", sep=""))#
#
	## download data#
	for(i in 1:nPages) {#
		obs <- fromJSON(URLencode(paste("http://api.inaturalist.org/v1/observations?project_id=",projId,"&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&page=",i,"&per_page=200&order=desc&order_by=created_at&quality_grade=research", sep="")))#
		obs$results <- obs$results[,!is.element(names(obs$results), dropColumns)]#
		if(i > 1) {#
			row.names(obs$results) <- (nrow(calCoast)+1):(nrow(calCoast)+nrow(obs$results))#
		}#
		calCoast <- merge(calCoast, obs$results)#
		#calCoast[[i]] <- obs$results#
		if(i %% 2 == 0) print(i)#
	}#
}#
save(calCoast, file="data files/calCoastObs.RData")
nrow(calCoast)
head(calCoast)
projId <- subset(projects, title==projNames[j])$id#
#
	## get number of observations and pages#
	nObs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?project_id=',projId,'&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=1&order=desc&order_by=created_at&quality_grade=research', sep="")))$total_results#
	if(nObs %% 200 == 0) {#
		nPages <- nObs/200#
	} else {#
		nPages <- trunc(nObs/200)+1#
	}#
	print(paste(projNames[j],": There are ",nObs," observations on ",nPages," pages.", sep=""))#
#
	## download data#
	for(i in 1:nPages) {#
		obs <- fromJSON(URLencode(paste("http://api.inaturalist.org/v1/observations?project_id=",projId,"&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&page=",i,"&per_page=200&order=desc&order_by=created_at&quality_grade=research", sep="")))#
		obs$results <- obs$results[,!is.element(names(obs$results), dropColumns)]#
		if(i > 1) {#
			row.names(obs$results) <- (nrow(calCoast)+1):(nrow(calCoast)+nrow(obs$results))#
			calCoast <- merge(calCoast, obs$results)#
		} else {#
			calCoast <- obs$results#
		}#
		#calCoast[[i]] <- obs$results#
		if(i %% 2 == 0) print(i)#
	}
dim(obs$results)
head(obs$results)
head(obs$results$observed_on_details)
paste(head(obs$results$observed_on_details), collapse=".")
head(obs$results$observed_on_details.date)
head(obs$results$observed_on_details$date)
x <- obs$results
colnames(x)
names(x)
dropColumns <- c('time_observed_at','annotations','photos','created_at_details','tags','created_time_zone','quality_metrics','flags','description','time_zone_offset','project_ids_with_curator_id','observed_o','observed_on_string','outlinks','sounds','ofvs','preferences','faves','non_owner_ids','project_ids_without_curator_id','votes','observation_photos','project_observations','identifications','geojson','reviewed_by')
obs$results <- obs$results[,!is.element(names(obs$results), dropColumns)]
x <- obs$results
NAMES(X)
names(x)
head(x$taxon)
head(x$observed_on_details)
head(x$place_ids)
paste(head(x$place_ids), collapse=",")
sapply(head(x$place_ids), paste, collapse=",")
head(x$comments)
sapply(x$comments, paste, collapse=",")
head(x$project_ids)
head(x$user)
# columns I don't want to keep#
dropColumns <- c('time_observed_at','annotations','photos','created_at_details','tags','created_time_zone','quality_metrics','flags','description','time_zone_offset','project_ids_with_curator_id','observed_o','observed_on_string','outlinks','sounds','ofvs','preferences','faves','non_owner_ids','project_ids_without_curator_id','votes','observation_photos','project_observations','identifications','geojson','reviewed_by','comments','project_ids')#
#
formatColumns <- function(x) {#
	# observed_on_details#
	x$date <- x$observed_on_details$date#
	x$hour <- x$observed_on_details$hour#
	# taxon#
	x$is_active <- x$taxon$is_active#
	x$endemic <- x$taxon$endemic#
	x$threatened <- x$taxon$threatened#
	x$introduced <- x$taxon$introduced#
	x$native <- x$taxon$native#
	x$name <- x$taxon$name#
	x$rank <- x$taxon$rank#
	x$extinct <- x$taxon$extinct#
	x$taxon_id <- x$taxon$id#
	x$observations_count <- x$taxon$observations_count#
	x$iconic_taxon_name <- x$taxon$iconic_taxon_name#
	x$preferred_common_name <- x$taxon$preferred_common_name#
	x$conservation_status.iucn <- x$taxon$conservation_status.iucn#
	x$conservation_status.geoprivacy <- x$taxon$conservation_status.geoprivacy#
	x$conservation_status.status <- x$taxon$conservation_status.status#
	# place_ids#
	x$place_ids <- sapply(x$place_ids, paste, collapse=",")#
	# user#
	x$user_id <- x$user$id#
	x$user_observation_counts <- x$user$observations_count#
	x$user_identification_count <- x$user$identifications_count#
	x <- x[,!is.element(colnames(x), c('observed_on_details','taxon','place_ids','user'))]	#
}
i
j
j <- 1
projId <- subset(projects, title==projNames[j])$id#
#
	## get number of observations and pages#
	nObs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?project_id=',projId,'&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=1&order=desc&order_by=created_at&quality_grade=research', sep="")))$total_results#
	if(nObs %% 200 == 0) {#
		nPages <- nObs/200#
	} else {#
		nPages <- trunc(nObs/200)+1#
	}#
	print(paste(projNames[j],": There are ",nObs," observations on ",nPages," pages.", sep=""))#
#
	## download data#
	for(i in 1:nPages) {#
		obs <- fromJSON(URLencode(paste("http://api.inaturalist.org/v1/observations?project_id=",projId,"&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&page=",i,"&per_page=200&order=desc&order_by=created_at&quality_grade=research", sep="")))#
		obs$results <- obs$results[,!is.element(names(obs$results), dropColumns)]#
		if(i > 1) {#
			row.names(obs$results) <- (nrow(calCoast)+1):(nrow(calCoast)+nrow(obs$results))#
			calCoast <- merge(calCoast, obs$results)#
		} else {#
			calCoast <- obs$results#
		}#
		#calCoast[[i]] <- obs$results#
		if(i %% 2 == 0) print(i)#
	}
i
j
head(calCoast)
nrow(calCoast)
formatColumns <- function(x) {#
	# observed_on_details#
	x$date <- x$observed_on_details$date#
	x$hour <- x$observed_on_details$hour#
	# taxon#
	x$is_active <- x$taxon$is_active#
	x$endemic <- x$taxon$endemic#
	x$threatened <- x$taxon$threatened#
	x$introduced <- x$taxon$introduced#
	x$native <- x$taxon$native#
	x$name <- x$taxon$name#
	x$rank <- x$taxon$rank#
	x$extinct <- x$taxon$extinct#
	x$taxon_id <- x$taxon$id#
	x$observations_count <- x$taxon$observations_count#
	x$iconic_taxon_name <- x$taxon$iconic_taxon_name#
	x$preferred_common_name <- x$taxon$preferred_common_name#
	x$conservation_status.iucn <- x$taxon$conservation_status.iucn#
	x$conservation_status.geoprivacy <- x$taxon$conservation_status.geoprivacy#
	x$conservation_status.status <- x$taxon$conservation_status.status#
	# place_ids#
	x$place_ids <- sapply(x$place_ids, paste, collapse=",")#
	# user#
	x$user_id <- x$user$id#
	x$user_observation_counts <- x$user$observations_count#
	x$user_identification_count <- x$user$identifications_count#
	x <- x[,!is.element(colnames(x), c('observed_on_details','taxon','place_ids','user'))]#
	return(x)#
}
i <- 1
j <- 1
projId <- subset(projects, title==projNames[j])$id#
#
	## get number of observations and pages#
	nObs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?project_id=',projId,'&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=1&order=desc&order_by=created_at&quality_grade=research', sep="")))$total_results#
	if(nObs %% 200 == 0) {#
		nPages <- nObs/200#
	} else {#
		nPages <- trunc(nObs/200)+1#
	}#
	print(paste(projNames[j],": There are ",nObs," observations on ",nPages," pages.", sep=""))#
#
	## download data#
	for(i in 1:nPages) {#
		obs <- fromJSON(URLencode(paste("http://api.inaturalist.org/v1/observations?project_id=",projId,"&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&page=",i,"&per_page=200&order=desc&order_by=created_at&quality_grade=research", sep="")))#
		obs$results <- obs$results[,!is.element(names(obs$results), dropColumns)]#
		obs$results <- formatColumns(obs$results)#
		if(i > 1) {#
			row.names(obs$results) <- (nrow(calCoast)+1):(nrow(calCoast)+nrow(obs$results))#
			calCoast <- merge(calCoast, obs$results)#
		} else {#
			calCoast <- obs$results#
		}#
		#calCoast[[i]] <- obs$results#
		if(i %% 2 == 0) print(i)#
	}
nrow(calCoast)
i
nPages
head(obs$results)
i > 1
row.names(obs$results) <- (nrow(calCoast)+1):(nrow(calCoast)+nrow(obs$results))
head(obs$results)
calCoast <- obs$results
row.names(obs$results) <- (nrow(calCoast)+1):(nrow(calCoast)+nrow(obs$results))
head(obs$results)
temp <- merge(calCoast, obs$results)
nrow(temp)
temp <- rbind(calCoast, obs$results)
nrow(temp)
projId <- subset(projects, title==projNames[j])$id#
#
	## get number of observations and pages#
	nObs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?project_id=',projId,'&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=1&order=desc&order_by=created_at&quality_grade=research', sep="")))$total_results#
	if(nObs %% 200 == 0) {#
		nPages <- nObs/200#
	} else {#
		nPages <- trunc(nObs/200)+1#
	}#
	print(paste(projNames[j],": There are ",nObs," observations on ",nPages," pages.", sep=""))#
#
	## download data#
	for(i in 1:3) {#
		obs <- fromJSON(URLencode(paste("http://api.inaturalist.org/v1/observations?project_id=",projId,"&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&page=",i,"&per_page=200&order=desc&order_by=created_at&quality_grade=research", sep="")))#
		obs$results <- obs$results[,!is.element(names(obs$results), dropColumns)]#
		obs$results <- formatColumns(obs$results)#
		if(i > 1) {#
			row.names(obs$results) <- (nrow(calCoast)+1):(nrow(calCoast)+nrow(obs$results))#
			calCoast <- rbind(calCoast, obs$results)#
		} else {#
			calCoast <- obs$results#
		}#
		#calCoast[[i]] <- obs$results#
		if(i %% 2 == 0) print(i)#
	}
nrow(calCoast)
# columns I don't want to keep#
dropColumns <- c('time_observed_at','annotations','photos','created_at_details','tags','created_time_zone','quality_metrics','flags','description','time_zone_offset','project_ids_with_curator_id','observed_o','observed_on_string','outlinks','sounds','ofvs','preferences','faves','non_owner_ids','project_ids_without_curator_id','votes','observation_photos','project_observations','identifications','geojson','reviewed_by','comments','project_ids')#
#
formatColumns <- function(x) {#
	# observed_on_details#
	x$date <- x$observed_on_details$date#
	x$hour <- x$observed_on_details$hour#
	# taxon#
	x$is_active <- x$taxon$is_active#
	x$endemic <- x$taxon$endemic#
	x$threatened <- x$taxon$threatened#
	x$introduced <- x$taxon$introduced#
	x$native <- x$taxon$native#
	x$name <- x$taxon$name#
	x$rank <- x$taxon$rank#
	x$extinct <- x$taxon$extinct#
	x$taxon_id <- x$taxon$id#
	x$observations_count <- x$taxon$observations_count#
	x$iconic_taxon_name <- x$taxon$iconic_taxon_name#
	x$preferred_common_name <- x$taxon$preferred_common_name#
	x$conservation_status.iucn <- x$taxon$conservation_status.iucn#
	x$conservation_status.geoprivacy <- x$taxon$conservation_status.geoprivacy#
	x$conservation_status.status <- x$taxon$conservation_status.status#
	# place_ids#
	x$place_ids <- sapply(x$place_ids, paste, collapse=",")#
	# user#
	x$user_id <- x$user$id#
	x$user_observation_counts <- x$user$observations_count#
	x$user_identification_count <- x$user$identifications_count#
	x <- x[,!is.element(colnames(x), c('observed_on_details','taxon','place_ids','user'))]#
	return(x)#
}#
#
# loop through projects#
for(j in 1:3) {#
	projId <- subset(projects, title==projNames[j])$id#
#
	## get number of observations and pages#
	nObs <- fromJSON(URLencode(paste('http://api.inaturalist.org/v1/observations?project_id=',projId,'&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&per_page=1&order=desc&order_by=created_at&quality_grade=research', sep="")))$total_results#
	if(nObs %% 200 == 0) {#
		nPages <- nObs/200#
	} else {#
		nPages <- trunc(nObs/200)+1#
	}#
	print(paste(projNames[j],": There are ",nObs," observations on ",nPages," pages.", sep=""))#
#
	## download data#
	for(i in 1:nPages) {#
		obs <- fromJSON(URLencode(paste("http://api.inaturalist.org/v1/observations?project_id=",projId,"&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&page=",i,"&per_page=200&order=desc&order_by=created_at&quality_grade=research", sep="")))#
		obs$results <- obs$results[,!is.element(names(obs$results), dropColumns)]#
		obs$results <- formatColumns(obs$results)#
		if(i > 1) {#
			row.names(obs$results) <- (nrow(calCoast)+1):(nrow(calCoast)+nrow(obs$results))#
			calCoast <- rbind(calCoast, obs$results)#
		} else {#
			calCoast <- obs$results#
		}			#
		if(i %% 2 == 0) print(i)#
	}#
}#
save(calCoast, file="data files/calCoastObs.RData")
head((calCoast))
obs <- fromJSON(URLencode(paste("http://api.inaturalist.org/v1/observations?project_id=",projId,"&rank=tribe,subtribe,genus,genushybrid,species,hybrid,subspecies,variety,form&page=",i,"&per_page=200&order=desc&order_by=created_at&quality_grade=research", sep="")))
obs$results <- obs$results[,!is.element(names(obs$results), dropColumns)]
Head(obs$results$observed_on)
head(obs$results$observed_on)
head(obs$results$observed_on_details)
x <- obs$results
class(x$observecd_on)
class(x$observed_on)
x$observed_on <- as.Date(x$observed_on, "%m-%d-%Y")
class(x$observed_on)
head(x$observed_on)
?as.date
?as.Date
x <- obs$results
x$observed_on <- as.Date(x$observed_on, "%Y-%m-%d")
head(x$observed_on)
class(x$observed_on)
## get list of snapshot cal coast projects#
projNames <- c("Snapshot Cal Coast 2016","Snapshot Cal Coast 2017","Snapshot Cal Coast 2018")#
projects <- fromJSON(URLencode('http://api.inaturalist.org/v1/projects?q=snapshot cal coast&per_page=200'))$results#
#
# columns I don't want to keep#
dropColumns <- c('time_observed_at','annotations','photos','created_at_details','tags','created_time_zone','quality_metrics','flags','description','time_zone_offset','project_ids_with_curator_id','observed_o','observed_on_string','outlinks','sounds','ofvs','preferences','faves','non_owner_ids','project_ids_without_curator_id','votes','observation_photos','project_observations','identifications','geojson','reviewed_by','comments','project_ids')#
#
formatColumns <- function(x, drops) {#
	x <- x[,!is.element(colnames(x), drops)]#
	# observed_on#
	x$observed_on <- as.Date(x$observed_on, "%Y-%m-%d")#
	# observed_on_details#
	x$year <- x$observed_on_details$year#
	# taxon#
	x$is_active <- x$taxon$is_active#
	x$endemic <- x$taxon$endemic#
	x$threatened <- x$taxon$threatened#
	x$introduced <- x$taxon$introduced#
	x$native <- x$taxon$native#
	x$name <- x$taxon$name#
	x$rank <- x$taxon$rank#
	x$extinct <- x$taxon$extinct#
	x$taxon_id <- x$taxon$id#
	x$observations_count <- x$taxon$observations_count#
	x$iconic_taxon_name <- x$taxon$iconic_taxon_name#
	x$preferred_common_name <- x$taxon$preferred_common_name#
	x$conservation_status.iucn <- x$taxon$conservation_status.iucn#
	x$conservation_status.geoprivacy <- x$taxon$conservation_status.geoprivacy#
	x$conservation_status.status <- x$taxon$conservation_status.status#
	# place_ids#
	x$place_ids <- sapply(x$place_ids, paste, collapse=",")#
	# user#
	x$user_id <- x$user$id#
	x$user_observation_counts <- x$user$observations_count#
	x$user_identification_count <- x$user$identifications_count#
	x <- x[,!is.element(colnames(x), c('observed_on_details','taxon','place_ids','user'))]#
	return(x)#
}
j
load("data files/calCoastObs.RData")
nrow(calCoast)
head(calCoast)
nrow(calCoast)
temp <- strsplit(calCoast$location, ",")
head(temp)
head(sapply(temp, function(x){return(x[2])}))
q()
