cleanTaxonomy
nrow(subset(pbdb, genus == ""))
nrow(subset(pbdb, is.na(genus)))
?cleanTaxonomy'
?cleanTaxonomy
constrainAges
citation(;'velociraptr')
citation('velociraptr')
head(pbdb)
? constrainAges
nrow(pbdb)
pbdb <- unique(pbdb) # eliminate duplicates from poorly resolved genera#
pbdb <- subset(pbdb, !is.na(genus)) # make sure there are not taxa without genus names#
pbdb <- constrainAges(pbdb, geoIntervals)
nrow(pbdb)
head(geoIntervals)
constrainAges <- function (Data, Timescale) #
{#
    Data[, "early_interval"] <- as.character(Data[, "early_interval"])#
    Data[, "late_interval"] <- as.character(Data[, "late_interval"])#
    for (i in 1:nrow(Timescale)) {#
        EarlyPos <- which(Data[, "max_ma"] > Timescale[i, "t_age"] & #
            Data[, "max_ma"] <= Timescale[i, "b_age"])#
        Data[EarlyPos, "early_interval"] <- as.character(Timescale[i, #
            "interval_name"])#
        LatePos <- which(Data[, "min_ma"] >= Timescale[i, "t_age"] & #
            Data[, "min_ma"] < Timescale[i, "b_age"])#
        Data[LatePos, "late_interval"] <- as.character(Timescale[i, #
            "interval_name"])#
    }#
    Data <- Data[Data[, "early_interval"] == Data[, "late_interval"], #
        ]#
    return(Data)#
}
load("/Volumes/Blastoid/noelheim_data/Desktop/pbdbAnimals.Rdata")
pbdb <- unique(pbdb) # eliminate duplicates from poorly resolved genera#
pbdb <- subset(pbdb, !is.na(genus)) # make sure there are not taxa without genus names#
pbdb <- constrainAges(pbdb, geoIntervals) # e
nrow(pbdb)
load("/Volumes/Blastoid/noelheim_data/Desktop/pbdbAnimals.Rdata")
nrow(pbdb)
pbdb <- unique(pbdb) # eliminate duplicates from poorly resolved genera
nrow(pbdb)
pbdb <- subset(pbdb, !is.na(genus)) # make sure there are not taxa without genus names
nrow(pbdb)
constrainAges <- function (Data, Timescale) #
{#
    Data[, "early_interval"] <- as.character(Data[, "early_interval"])#
    Data[, "late_interval"] <- as.character(Data[, "late_interval"])#
    for (i in 1:nrow(Timescale)) {#
        EarlyPos <- which(Data[, "max_ma"] > Timescale[i, "min_ma"] & Data[, "max_ma"] <= Timescale[i, "max_ma"])#
        Data[EarlyPos, "early_interval"] <- as.character(Timescale[i, "interval_name"])#
        LatePos <- which(Data[, "min_ma"] >= Timescale[i, "min_ma"] &  Data[, "min_ma"] < Timescale[i, "max_ma"])#
        Data[LatePos, "late_interval"] <- as.character(Timescale[i,"interval_name"])#
    }#
    Data <- Data[Data[, "early_interval"] == Data[, "late_interval"], ]#
    return(Data)#
}
pbdb <- constrainAges(pbdb, geoIntervals) # eliminate occurrences not constrained to a single age
nrow(pbdb)
q()
8000/135
8000/135*3
exp(5)
log10(500)
log10(1000)
log10(10000)
log10(100000)
q()
6^2
6^(2/3)
(6^2)^(1/3)
noam <- read.csv("https://macrostrat.org/api/units?interval_name=Phanerozoic&response=long&format=csv", header=TRUE)
nrow(noam)
colnanmes(noam)
colnames(noam)
library(jsonlite)
?fromjson
?jsonlite
noam <- fromJSON("https://macrostrat.org/api/units?interval_name=Phanerozoic&response=long&format=json", header=TRUE)
noam <- fromJSON("https://macrostrat.org/api/units?interval_name=Phanerozoic&response=long&format=json")
head(noam)
head(noam$success$data)
noam <- read.csv("https://macrostrat.org/api/units?interval_name=Phanerozoic&response=long&format=csv&project_id=1", header=TRUE)
liths <- read.csv("https://macrostrat.org/api/defs/lithologies?all&format=csv", header=TRUE)
head(liths)
liths
table(liths$lith_type)
table(liths$type)
table(liths$class)
nrow(noam)
length(levels(noam$lith))
head(noam$lith)
noam <- read.csv("https://macrostrat.org/api/units?interval_name=Phanerozoic,Pliocene&response=long&format=csv&project_id=1", header=TRUE)
timescale <- read.csv("https://macrostrat.org/api/defs/intervals?timescale=international%20ages", header=TRUE)
timescale <- read.csv("https://macrostrat.org/api/defs/intervals?timescale=international%20ages&format=csv", header=TRUE)
timescale
timescale <- subset(timescale, b_age >= b_age[name == 'Piacenzian'])
timescale
timescale <- read.csv("https://macrostrat.org/api/defs/intervals?timescale=international%20ages&format=csv&?late_age=2.588&early_age=541", header=TRUE)
timescale
timescale <- read.csv("https://macrostrat.org/api/defs/intervals?timescale=international%20ages&format=csv&late_age=2.588&early_age=541", header=TRUE)
timescale
timescale <- read.csv("https://macrostrat.org/api/defs/intervals?timescale=international%20ages&format=csv", header=TRUE)
timescale
timescale <- subset(timescale, b_age >= b_age[name == 'Piacenzian'])
timescale
12.99*36
9.99*36
?predict
10.5/89
?scale
head(noam)
nrow(subset(noam, is.na(strat_name_id)))
nrow(subset(noam, is.na(strat_name_id)))/nrow(noam)
range(subset(noam, is.na(strat_name_id))$b_age)
2.9e-3
2.9e3
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?datainfo&rowcount&base_name=Brachiopoda&taxon_reso=species&interval=Permian", header=T)
nrow(x)
head(x)
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?rowcount&base_name=Brachiopoda&taxon_reso=species&interval=Permian", header=T)
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Permian", header=T)
head(x)
nrow(x)
table(x$measurement)
length(unique(x$specimen_no))
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Permian&show=full", header=T)
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Permian&show=spec,class", header=T)
nrow(x)
head(x)
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Permian&show=spec,class,ref,entname", header=T)
nrow(x)
length(unique(x$accepted_name))
y <- data.frame('maxSize'=tapply(x$average, x$accepted_name, min, na.rm=TRUE), 'maxAge'=tapply(x$max_ma, x$accepted_name, max, na.rm=TRUE),'minAge'=tapply(x$min_ma, x$accepted_name, min, na.rm=TRUE))
head(y)
nrow(y)
range(y$maxSize)
range(x$min, na.rm=T)
range(x$max, na.rm=T)
head(x)
table(x$authorizer)
levels(x$accepted_name)
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Permian,Triassic&show=spec,class,ref,entname", header=TRUE)#
permBrachs <- data.frame('maxSize'=tapply(x$average, x$accepted_name, min, na.rm=TRUE), 'maxAge'=tapply(x$max_ma, x$accepted_name, max, na.rm=TRUE),'minAge'=tapply(x$min_ma, x$accepted_name, min, na.rm=TRUE))
nrow(permBrachs)
table(x$authorizer)
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Carboniferous,Triassic&show=spec,class,ref,entname", header=TRUE)#
permBrachs <- data.frame('maxSize'=tapply(x$average, x$accepted_name, min, na.rm=TRUE), 'maxAge'=tapply(x$max_ma, x$accepted_name, max, na.rm=TRUE),'minAge'=tapply(x$min_ma, x$accepted_name, min, na.rm=TRUE))
nrow(permBrachs)
table(x$authorizer)
4546+116
hist(permBrachs$maxAge)
x <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Permian&show=spec,class,ref,entname", header=TRUE)#
permBrachs <- data.frame('maxSize'=tapply(x$average, x$accepted_name, min, na.rm=TRUE), 'maxAge'=tapply(x$max_ma, x$accepted_name, max, na.rm=TRUE),'minAge'=tapply(x$min_ma, x$accepted_name, min, na.rm=TRUE))
head(x)
taply(x$average, x$measurement, max)
tapply(x$average, x$measurement, max)
rawData <- read.csv(file="https://paleobiodb.org/data1.2/specs/measurements.csv?base_name=Brachiopoda&taxon_reso=species&interval=Permian&show=spec,class,ref,entname", header=TRUE)#
#
speciesSizes <- data.frame('maxSize'=tapply(rawData$average, rawData$accepted_name, min, na.rm=TRUE), 'maxAge'=tapply(rawData$max_ma, rawData$accepted_name, max, na.rm=TRUE),'minAge'=tapply(rawData$min_ma, rawData$accepted_name, min, na.rm=TRUE))#
#
genusSizes <- data.frame('genus'=levels(rawData$genus), 'nSpecies'=tapply(rawData$accepted_name, rawData$genus, function(x){return(length(unqiue(x)))}), 'maxAge'=tapply(rawData$max_ma, rawData$genus, max, na.rm=TRUE),'minAge'=tapply(rawData$min_ma, rawData$genus, min, na.rm=TRUE))
genusSizes <- data.frame('genus'=levels(rawData$genus), 'nSpecies'=tapply(rawData$accepted_name, rawData$genus, function(x){return(length(unique(x)))}), 'maxAge'=tapply(rawData$max_ma, rawData$genus, max, na.rm=TRUE),'minAge'=tapply(rawData$min_ma, rawData$genus, min, na.rm=TRUE))
head(genusSizes)
nrow(genusSizes)
tapply(rawData$average, list(rawData$accepted_name, rawData$measurement), max, na.rm=TRUE)
head(tapply(rawData$average, list(rawData$accepted_name, rawData$measurement), max, na.rm=TRUE))
head(genusSizes)
speciesSizes <- data.frame('maxAge'=tapply(rawData$max_ma, rawData$accepted_name, max, na.rm=TRUE),'minAge'=tapply(rawData$min_ma, rawData$accepted_name, min, na.rm=TRUE), tapply(rawData$average, list(rawData$accepted_name, rawData$measurement), max, na.rm=TRUE))
head(speciesSizes)
speciesSizes <- data.frame('maxAge'=tapply(rawData$max_ma, rawData$accepted_name, max, na.rm=TRUE),'minAge'=tapply(rawData$min_ma, rawData$accepted_name, min, na.rm=TRUE), tapply(rawData$average, list(rawData$accepted_name, rawData$measurement), max, na.rm=TRUE), 'maxDim' = tapply(rawData$average, rawData$accepted_name, max, na.rm=TRUE))
head(speciesSizes)
plot(speciesSizes$length, speciesSizes$width, pch=16); abline(a=0,b=1,lty=2, col='red')
plot(speciesSizes$maxDim, speciesSizes$width, pch=16); abline(a=0,b=1,lty=2, col='red')
nrow(speciesSizes)
nrow(subset(speciesSizes, width==maxDim))
nrow(subset(speciesSizes, width==maxDim))/nrow(speciesSizes)
tapply(rawData$genus, rawData$accepted_name, max)
tapply(rawData$genus, rawData$accepted_name, function(x){return(x[1])})
tapply(rawData$genus, rawData$accepted_name, function(x){return(as.character(x[1]))})
head(tapply(rawData$genus, rawData$accepted_name, function(x){return(as.character(x[1]))}))
speciesSizes <- data.frame('genus'=factor(tapply(rawData$genus, rawData$accepted_name, function(x){return(as.character(x[1]))})), 'maxAge'=tapply(rawData$max_ma, rawData$accepted_name, max, na.rm=TRUE),'minAge'=tapply(rawData$min_ma, rawData$accepted_name, min, na.rm=TRUE), tapply(rawData$average, list(rawData$accepted_name, rawData$measurement), max, na.rm=TRUE), 'maxDim' = tapply(rawData$average, rawData$accepted_name, max, na.rm=TRUE))
head(speciesSizes)
range(speciesSizes$maxDim)
genusSizes <- data.frame('nSpecies'=table(speciesSizes$genus), 'maxAge'=tapply(speciesSizes$max_ma, speciesSizes$genus, max, na.rm=TRUE),'minAge'=tapply(speciesSizes$min_ma, speciesSizes$genus, min, na.rm=TRUE), 'meanSize'=tapply(speciesSizes$maxDim, speciesSizes$genus, mean))
genusSizes <- data.frame('nSpecies'=table(speciesSizes$genus), 'maxAge'=tapply(speciesSizes$maxAge, speciesSizes$genus, max, na.rm=TRUE),'minAge'=tapply(speciesSizes$minAge, speciesSizes$genus, min, na.rm=TRUE), 'meanSize'=tapply(speciesSizes$maxDim, speciesSizes$genus, mean))
head(genusSizes)
q()
4*5
67000/60/50
58/40/50
58000/40/50
67000/56/50
58000/41/50
1334/270
1334/263
(1334-26)/263
(1334-263)/263
(1334-263)/
(1334-263)
240-145
(240-145)/12
169-146
(240-121)/12
205/8
244/8
q()
?png
q()
69.5-58
(69.5-58)/69.5
(69.4-58)/69.4
q()
# set root base for proper file direction#
init.dir <- getwd()#
if(is.element(Sys.info()["nodename"], c("es-naheim.local","sr12-cf96e71ca1.stanford.edu"))) {#
	my.root <- "/Volumes/Blastoid/noelheim_data"#
} else {#
	my.root <- "/Users/noelheim"#
}#
Sys.setenv(TZ="America/Los_Angeles")#
#
source(paste(my.root,"/Box Sync/Includes/myFunctions.r", sep=""));#
setwd(paste(my.root,"/Box Sync/git/snapshotcalcoast", sep=""));#
#
library(vegan)#
library(maps)#
require(rgdal)#
#
crswgs84 <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs") # map projection
## maps#
counties <- readOGR(dsn = "data files/CA_Counties/", layer = "CA_Counties_TIGER2016")#
counties <- spTransform(counties, crswgs84)
plot(counties)
counties@data
caounties@NAME
caounties@Sierra
counties@Sierra
counties@NAME
counties$NAME
sanFrancisco <- counties[counties$NAME == 'San Francisco',]
plot(sanFrancisco)
load("data files/calCoastObs.RData")
obsCoords <- data.frame(calCoast$lng, calCoast$lat)#
# Assignment modified according#
coordinates(obsCoords) <- ~ lng + lat#
# Set the projection of the SpatialPointsDataFrame using the projection of the shapefile#
proj4string(obsCoords) <- proj4string(counties)
sanFrancisco <- counties[counties$NAME == 'San Francisco',]#
#
obsCoords <- data.frame(calCoast$lng, calCoast$lat)#
# Assignment modified according#
coordinates(obsCoords) <- ~ lng + lat#
# Set the projection of the SpatialPointsDataFrame using the projection of the shapefile#
proj4string(obsCoords) <- proj4string(counties)
head(calCoast)
head(obsCoords)
obsCoords <- data.frame('lng'=calCoast$lng, 'lat'=calCoast$lat)#
# Assignment modified according#
coordinates(obsCoords) <- ~ lng + lat
range(obsCoords$lng)
levels(obsCoords$lng)
range(as.numeric(calCoast$lng))
load("data files/calCoastObs.RData")#
calCoast$lng <- as.numeric(calCoast$lng)#
calCoast$lat <- as.numeric(calCoast$lat)
obsCoords <- data.frame('lng'=calCoast$lng, 'lat'=calCoast$lat)#
# Assignment modified according#
coordinates(obsCoords) <- ~ lng + lat
proj4string(obsCoords) <- proj4string(counties)
?over
over(obsCoords, sanFrancisco)
over(sanFrancisco, obsCoords)
head(calCoast)
class(obsCoords)
obsCoords <- data.frame('lng'=calCoast$lng, 'lat'=calCoast$lat, 'id'=calCoast$id)#
# Assignment modified according#
coordinates(obsCoords) <- ~ lng + lat#
# Set the projection of the SpatialPointsDataFrame using the projection of the shapefile#
proj4string(obsCoords) <- proj4string(counties)
over(sanFrancisco, obsCoords)
bayArea <- counties[is.element(counties$NAME, c('Sonoma','San Mateo','Napa','Alameda','Contra Costa','Solano','San Francisco','Santa Clara'),]
bayArea <- counties[is.element(counties$NAME, c('Sonoma','San Mateo','Napa','Alameda','Contra Costa','Solano','San Francisco','Santa Clara')),]
over(bayArea, obsCoords)
counties$NAMES[10]
counties$NAME[10]
plot(bayArea)
points(obsCoords)
bayArea <- counties[is.element(counties$NAME, c('Marin','Sonoma','San Mateo','Napa','Alameda','Contra Costa','Solano','San Francisco','Santa Clara')),]
plot(bayArea)
points(obsCoords)
bayCounties <- c('Marin','Sonoma','San Mateo','Napa','Alameda','Contra Costa','Solano','San Francisco','Santa Clara')#
coastCounties <- c(bayCounties, 'Del Norte','Humboldt','Mendocino','Santa Cruz','Monterey','San Luis Obispo','Santa Barbara','Ventura','Los Angeles','Orange','San Diego')
# subset individual counties#
bayArea <- counties[is.element(counties$NAME, bayCounties),]#
coastalCounties <- counties[is.element(counties$NAME, coastCounties),]
plot(coastalCounties)
plot(coastalCounties, fill='red')
plot(coastalCounties, bg='red')
plot(coastalCounties, col='red')
map('state','California', add=T, col='blue')
?over
class(sanFrancisco)
class(obsCoords)
obsCoords <- data.frame('lng'=calCoast$lng, 'lat'=calCoast$lat, 'id'=calCoast$id)#
# Assignment modified according#
coordinates(obsCoords) <- ~ lng + lat#
proj4string(obsCoords) <- CRS("+proj=longlat")#
# Set the projection of the SpatialPointsDataFrame using the projection of the shapefile#
obsCoords <- spTransform(obsCoords, proj4string(counties))#
#
over(bayArea, obsCoords)
temp <- over(obsCoords, bayArea)
head(temp)
nrow(temp)
nrow(calCoast)
temp <- !is.na(over(obsCoords, bayArea))
head(temp)
coordinates(calCoast) <- ~ lng + lat#
proj4string(calCoast) <- CRS("+proj=longlat")#
# Set the projection of the SpatialPointsDataFrame using the projection of the shapefile#
calCoast <- spTransform(calCoast, proj4string(counties))
head(calCoast)
plot(calCoast)
plot(coastalCounties)
points(calCoast, col='red', pch=16, cex=0.5)
points(calCoast[calCoast&year==2016], col='blue', pch=16, cex=0.5)
points(calCoast[calCoast$year==2016], col='blue', pch=16, cex=0.5)
points(calCoast[calCoast$year==2016,], col='blue', pch=16, cex=0.5)
temp <- !is.na(over(calCoast, bayArea))
nrow(temp)
class(bayArea)
temp <- !is.na(over(calCoast, as(bayArea, "SpatialPolygons")))
nrow(temp)
head(temp)
temp
length(temp)
plot(coastalCounties)#
points(calCoast[temp,], col='blue', pch=16, cex=0.5)
exit
q()
